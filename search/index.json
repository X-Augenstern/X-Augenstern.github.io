[{"content":"\n父工程pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.xz.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springcloud\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;modules\u0026gt; \u0026lt;module\u0026gt;mybatis_generator\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;cloud-provider-payment8001\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;cloud-consumer-order80\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;cloud-api-commons\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;cloud-provider-payment8002\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;cloud-consumer-feign-order80\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;cloud-gateway9527\u0026lt;/module\u0026gt; \u0026lt;/modules\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;17\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;17\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;hutool.version\u0026gt;5.8.22\u0026lt;/hutool.version\u0026gt; \u0026lt;lombok.version\u0026gt;1.18.36\u0026lt;/lombok.version\u0026gt; \u0026lt;druid.version\u0026gt;1.1.23\u0026lt;/druid.version\u0026gt; \u0026lt;mybatis.springboot.version\u0026gt;3.0.4\u0026lt;/mybatis.springboot.version\u0026gt; \u0026lt;mysql.version\u0026gt;8.0.28\u0026lt;/mysql.version\u0026gt; \u0026lt;swagger3.version\u0026gt;2.2.0\u0026lt;/swagger3.version\u0026gt; \u0026lt;mapper.version\u0026gt;4.2.3\u0026lt;/mapper.version\u0026gt; \u0026lt;fastjson2.version\u0026gt;2.0.40\u0026lt;/fastjson2.version\u0026gt; \u0026lt;persistence-api.version\u0026gt;1.0.2\u0026lt;/persistence-api.version\u0026gt; \u0026lt;spring.boot.test.version\u0026gt;3.2.0\u0026lt;/spring.boot.test.version\u0026gt; \u0026lt;spring.boot.version\u0026gt;3.2.0\u0026lt;/spring.boot.version\u0026gt; \u0026lt;spring.cloud.version\u0026gt;2023.0.0\u0026lt;/spring.cloud.version\u0026gt; \u0026lt;spring.cloud.alibaba.version\u0026gt;2023.0.0.0-RC1\u0026lt;/spring.cloud.alibaba.version\u0026gt; \u0026lt;micrometer-tracing.version\u0026gt;1.2.0\u0026lt;/micrometer-tracing.version\u0026gt; \u0026lt;micrometer-observation.version\u0026gt;1.12.0\u0026lt;/micrometer-observation.version\u0026gt; \u0026lt;feign-micrometer.version\u0026gt;12.5\u0026lt;/feign-micrometer.version\u0026gt; \u0026lt;zipkin-reporter-brave.version\u0026gt;2.17.0\u0026lt;/zipkin-reporter-brave.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!--springboot 3.3.5--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.boot.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--springcloud 2023.0.0--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.cloud.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--springcloud alibaba 2023.0.0.0-RC1--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-alibaba-dependencies\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.cloud.alibaba.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringBoot集成mybatis--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.spring.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mybatis.springboot.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--1、Mysql数据库驱动8 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mysql.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--2、SpringBoot集成druid连接池--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;druid-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${druid.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--3、通用Mapper4之tk.mybatis--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;tk.mybatis\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mapper\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${mapper.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--4、persistence--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.persistence\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;persistence-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${persistence-api.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- fastjson2 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.fastjson2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson2\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${fastjson2.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- swagger3 调用方式 http://你的主机IP地址:5555/swagger-ui/index.html --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springdoc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springdoc-openapi-starter-webmvc-ui\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${swagger3.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--hutool--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${hutool.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${lombok.version}\u0026lt;/version\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- spring-boot-starter-test --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spring.boot.test.version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-tracing-bom导入链路追踪版本中心 1--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing-bom\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${micrometer-tracing.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-tracing指标追踪 2--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${micrometer-tracing.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-tracing-bridge-brave适配zipkin的桥接包 3--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing-bridge-brave\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${micrometer-tracing.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-observation 4--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-observation\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${micrometer-observation.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--feign-micrometer 5--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.github.openfeign\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;feign-micrometer\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${feign-micrometer.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--zipkin-reporter-brave 6--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.zipkin.reporter2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;zipkin-reporter-brave\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${zipkin-reporter-brave.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; \u0026lt;/project\u0026gt; mybatis_generate（代码生成） pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 \u0026lt;!--自己独一份，只是一个普通Maven工程，与boot和cloud无关--\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!--Mybatis 通用mapper tk单独使用，自己独有+自带版本号--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.5.15\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Mybatis Generator 自己独有+自带版本号--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.generator\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-generator-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.4.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--通用Mapper--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;tk.mybatis\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mapper\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--mysql8.0--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--persistence--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.persistence\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;persistence-api\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--hutool--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.junit.vintage\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-vintage-engine\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;resources\u0026gt; \u0026lt;resource\u0026gt; \u0026lt;directory\u0026gt;${basedir}/src/main/java\u0026lt;/directory\u0026gt; \u0026lt;includes\u0026gt; \u0026lt;include\u0026gt;**/*.xml\u0026lt;/include\u0026gt; \u0026lt;/includes\u0026gt; \u0026lt;/resource\u0026gt; \u0026lt;resource\u0026gt; \u0026lt;directory\u0026gt;${basedir}/src/main/resources\u0026lt;/directory\u0026gt; \u0026lt;/resource\u0026gt; \u0026lt;/resources\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;excludes\u0026gt; \u0026lt;exclude\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;/exclude\u0026gt; \u0026lt;/excludes\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.generator\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-generator-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.4.2\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;configurationFile\u0026gt;${basedir}/src/main/resources/generatorConfig.xml\u0026lt;/configurationFile\u0026gt; \u0026lt;overwrite\u0026gt;true\u0026lt;/overwrite\u0026gt; \u0026lt;verbose\u0026gt;true\u0026lt;/verbose\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;8.0.28\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;tk.mybatis\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mapper\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;4.2.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; config.properties 1 2 3 4 5 6 7 8 9 10 11 #t_pay??? package.name=com.xz.springcloud # mysql8.0 jdbc.driverClass = com.mysql.cj.jdbc.Driver # jdbc.url= jdbc:mysql://localhost:3306/db2024?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;serverTimezone=GMT%2B8\u0026amp;rewriteBatchedStatements=true\u0026amp;allowPublicKeyRetrieval=true # jdbc.url= jdbc:mysql://localhost:3306/seata_order?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;serverTimezone=GMT%2B8\u0026amp;rewriteBatchedStatements=true\u0026amp;allowPublicKeyRetrieval=true # jdbc.url= jdbc:mysql://localhost:3306/seata_storage?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;serverTimezone=GMT%2B8\u0026amp;rewriteBatchedStatements=true\u0026amp;allowPublicKeyRetrieval=true jdbc.url= jdbc:mysql://localhost:3306/seata_account?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;serverTimezone=GMT%2B8\u0026amp;rewriteBatchedStatements=true\u0026amp;allowPublicKeyRetrieval=true jdbc.user = root jdbc.password =527644117 generateConfig.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE generatorConfiguration PUBLIC \u0026#34;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\u0026#34;\u0026gt; \u0026lt;generatorConfiguration\u0026gt; \u0026lt;properties resource=\u0026#34;config.properties\u0026#34;/\u0026gt; \u0026lt;context id=\u0026#34;Mysql\u0026#34; targetRuntime=\u0026#34;MyBatis3Simple\u0026#34; defaultModelType=\u0026#34;flat\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;beginningDelimiter\u0026#34; value=\u0026#34;`\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;endingDelimiter\u0026#34; value=\u0026#34;`\u0026#34;/\u0026gt; \u0026lt;plugin type=\u0026#34;tk.mybatis.mapper.generator.MapperPlugin\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;mappers\u0026#34; value=\u0026#34;tk.mybatis.mapper.common.Mapper\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;caseSensitive\u0026#34; value=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;jdbcConnection driverClass=\u0026#34;${jdbc.driverClass}\u0026#34; connectionURL=\u0026#34;${jdbc.url}\u0026#34; userId=\u0026#34;${jdbc.user}\u0026#34; password=\u0026#34;${jdbc.password}\u0026#34;\u0026gt; \u0026lt;/jdbcConnection\u0026gt; \u0026lt;javaModelGenerator targetPackage=\u0026#34;${package.name}.entities\u0026#34; targetProject=\u0026#34;src/main/java\u0026#34;/\u0026gt; \u0026lt;sqlMapGenerator targetPackage=\u0026#34;${package.name}.mapper\u0026#34; targetProject=\u0026#34;src/main/java\u0026#34;/\u0026gt; \u0026lt;javaClientGenerator targetPackage=\u0026#34;${package.name}.mapper\u0026#34; targetProject=\u0026#34;src/main/java\u0026#34; type=\u0026#34;XMLMAPPER\u0026#34;/\u0026gt; \u0026lt;!--\u0026lt;table tableName=\u0026#34;t_pay\u0026#34; domainObjectName=\u0026#34;Pay\u0026#34;\u0026gt; \u0026lt;generatedKey column=\u0026#34;id\u0026#34; sqlStatement=\u0026#34;JDBC\u0026#34;/\u0026gt; \u0026lt;/table\u0026gt;--\u0026gt; \u0026lt;!-- seata_order --\u0026gt; \u0026lt;!--\u0026lt;table tableName=\u0026#34;t_order\u0026#34; domainObjectName=\u0026#34;Order\u0026#34;\u0026gt; \u0026lt;generatedKey column=\u0026#34;id\u0026#34; sqlStatement=\u0026#34;JDBC\u0026#34;/\u0026gt; \u0026lt;/table\u0026gt;--\u0026gt; \u0026lt;!-- seate_storage --\u0026gt; \u0026lt;!--\u0026lt;table tableName=\u0026#34;t_storage\u0026#34; domainObjectName=\u0026#34;Storage\u0026#34;\u0026gt; \u0026lt;generatedKey column=\u0026#34;id\u0026#34; sqlStatement=\u0026#34;JDBC\u0026#34;/\u0026gt; \u0026lt;/table\u0026gt;--\u0026gt; \u0026lt;!-- seate_account --\u0026gt; \u0026lt;table tableName=\u0026#34;t_account\u0026#34; domainObjectName=\u0026#34;Account\u0026#34;\u0026gt; \u0026lt;generatedKey column=\u0026#34;id\u0026#34; sqlStatement=\u0026#34;JDBC\u0026#34;/\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/context\u0026gt; \u0026lt;/generatorConfiguration\u0026gt; cloud-api-commons（install为jar包供其它微服务使用、OpenFeign、OpenFeign+Sentinel） pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;dependencies\u0026gt; \u0026lt;!--SpringBoot通用依赖模块--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--hutool--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--openfeign--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-openfeign\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; apis PayFeignAPi 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 /** * 微服务提供者8001对外暴露接口 */ // @FeignClient(\u0026#34;cloud-payment-service\u0026#34;) // 就是去注册中心的指定微服务上找相同uri然后调用相应的微服务方法 @FeignClient(\u0026#34;cloud-gateway\u0026#34;) /* 此时再关闭网关 { \u0026#34;code\u0026#34;: \u0026#34;500\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;[503] during [GET] to [http://cloud-gateway/pay/gateway/info] [PayFeignAPi#getGatewayInfo()]: [Load balancer does not contain an instance for the service cloud-gateway]\u0026#34;, \u0026#34;data\u0026#34;: null, \u0026#34;timestamp\u0026#34;: 1733728892254 } 再开启网关 { \u0026#34;code\u0026#34;: \u0026#34;200\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;success\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;gateway info test: 5e6f3b3eb1d845f5bc86bbd759bd9084\u0026#34;, \u0026#34;timestamp\u0026#34;: 1733728974072 } 现在三个url都可以访问服务： http://localhost:8001/pay/gateway/info http://localhost:9527/pay/gateway/info http://localhost:80/feign/pay/gateway/info */ public interface PayFeignAPi { /** * 增加一条支付相关流水记录 * * @param payDTO * @return */ @PostMapping(\u0026#34;/pay/add\u0026#34;) ResultData addPay(@RequestBody PayDTO payDTO); /** * 按照主键记录查询支付流水信息 * * @param id * @return */ @GetMapping(\u0026#34;/pay/get/{id}\u0026#34;) ResultData getPayInfo(@PathVariable(\u0026#34;id\u0026#34;) Integer id); /** * openfeign天然支持负载均衡演示 * * @return */ @GetMapping(\u0026#34;/pay/get/info\u0026#34;) String mylb(); @GetMapping(\u0026#34;/pay/circuit/{id}\u0026#34;) String myCircuit(@PathVariable(\u0026#34;id\u0026#34;) Integer id); @GetMapping(\u0026#34;/pay/bulkhead/{id}\u0026#34;) String myBulkhead(@PathVariable(\u0026#34;id\u0026#34;) Integer id); @GetMapping(\u0026#34;/pay/ratelimit/{id}\u0026#34;) String myRatelimit(@PathVariable(\u0026#34;id\u0026#34;) Integer id); @GetMapping(\u0026#34;/pay/micrometer/{id}\u0026#34;) String myMicrometer(@PathVariable(\u0026#34;id\u0026#34;) Integer id); @GetMapping(\u0026#34;/pay/gateway/get/{id}\u0026#34;) ResultData getById(@PathVariable(\u0026#34;id\u0026#34;) Integer id); @GetMapping(\u0026#34;/pay/gateway/info\u0026#34;) ResultData\u0026lt;String\u0026gt; getGatewayInfo(); } PayFeignSentinelAPi：OpenFeign+Sentinel 1 2 3 4 5 6 @FeignClient(value = \u0026#34;nacos-payment-provider\u0026#34;,fallback = PayFeignSentinelApiFallBack.class) // 谁提供服务写谁/转发给谁写谁 public interface PayFeignSentinelApi { @GetMapping(\u0026#34;/pay/nacos/get/{orderNo}\u0026#34;) ResultData getPayByOrderNo(@PathVariable(\u0026#34;orderNo\u0026#34;) String orderNo); } PayFeignSentinelApiFallBack 1 2 3 4 5 6 7 @Component public class PayFeignSentinelApiFallBack implements PayFeignSentinelApi { @Override public ResultData getPayByOrderNo(String orderNo) { return ResultData.fail(ReturnCodeEnum.RC500.getCode(), \u0026#34;对方服务宕机或不可用，FallBack服务降级\u0026#34;); } } StorageFeignApi 1 2 3 4 5 6 7 8 @FeignClient(\u0026#34;seata-storage-service\u0026#34;) public interface StorageFeignApi { /** * 扣减库存 */ @GetMapping(\u0026#34;storage/decrease\u0026#34;) ResultData decrease(@RequestParam(\u0026#34;productId\u0026#34;) Long productId, @RequestParam(\u0026#34;count\u0026#34;) Integer count); } AccountFeignAPi 1 2 3 4 5 6 7 8 @FeignClient(\u0026#34;seata-account-service\u0026#34;) public interface AccountFeignAPi { /** * 扣减余额 */ @GetMapping(\u0026#34;/account/decrease\u0026#34;) ResultData decrease(@RequestParam(\u0026#34;userId\u0026#34;) Long userId, @RequestParam(\u0026#34;money\u0026#34;) Long money); } entities.PayDTO 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * DTO（数据传输对象） * 目的：DTO 主要用于数据传输，尤其是在分布式系统或不同层之间传递数据时。它通常是从数据库或服务中提取的数据对象，经过加工后用于传输。 * 特性： * 主要用于不同系统、模块之间的通信，避免传递过多的细节。 * 可能包含冗余数据或不同领域的数据，目的是为了提高传输效率。 * DTO 通常是无业务逻辑的，仅作为数据的载体。 * 可以是可变的，通常包含 setter 和 getter 方法。 * * dto中的字段实体类中一定存在，vo中的字段实体类中不一定存在 * dto是前端传给后端的，vo是后端传给前端的 * * 一般而言，调用者不应该获悉服务提供者的entity资源并知道表结构关系，所以服务提供方给出的接口文档都应为DTO */ @Data @NoArgsConstructor @AllArgsConstructor public class PayDTO implements Serializable { private Integer id; // 支付流水号 private String payNo; // 订单流水号 private String orderNo; // 用户账号ID private Integer userId; // 交易金额 private BigDecimal amount; } exp.GlobalExceptionHandler 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /** * 全局异常 * * @ControllerAdvice 是一个用于处理全局异常的类注解，它可以捕获所有控制器中的异常并统一处理。 * 如果希望返回视图而不是直接返回 JSON，可以使用 @ControllerAdvice。 * * @RestControllerAdvice 是 @ControllerAdvice 和 @ResponseBody 的组合，它适用于返回 JSON 或其他对象响应体的情况。通常用于 RESTful 风格的 Web 服务中。 * * @RestControllerAdvice（或 @ControllerAdvice） * 这个注解的作用是将类标记为全局异常处理器，即所有控制器中的异常都会通过这个类来统一处理。它本身并不直接指定处理哪种类型的异常，而是用来指示一个类是用来处理异常的。 * * @ExceptionHandler(RuntimeException.class) * 这个注解是用来处理 特定类型的异常 的。它通常放在一个异常处理方法上，指定该方法捕获 RuntimeException 类型的异常。 * @ExceptionHandler 可以放在任何控制器类或者 @ControllerAdvice 类中，它用来拦截并处理指定类型的异常。 */ @Slf4j @RestControllerAdvice // 该类会对所有的控制器类进行增强处理，并且方法的返回值会直接转换成响应体的内容，标记 GlobalExceptionHandler 类是用来处理异常的 public class GlobalExceptionHandler { @ExceptionHandler(RuntimeException.class) // 标明当发生 RuntimeException 时，exception 方法会被调用，返回统一的错误响应。 @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) // 当这个异常被捕获时，HTTP 响应的状态码会设置为 500（内部服务器错误）。 public ResultData\u0026lt;String\u0026gt; exception(Exception e) { System.out.println(\u0026#34;come in GlobalExceptionHandler\u0026#34;); // 2024-12-04T18:41:14.992+08:00 ERROR 12528 --- [cloud-payment-service] [io-8001-exec-10] c.x.s.exp.GlobalExceptionHandler : 全局异常信息：id不能为负数 log.error(\u0026#34;全局异常信息：{}\u0026#34;, e.getMessage(), e); return ResultData.fail(ReturnCodeEnum.RC500.getCode(), e.getMessage()); /* { \u0026#34;code\u0026#34;: \u0026#34;500\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;id不能为负数\u0026#34;, \u0026#34;data\u0026#34;: null, \u0026#34;timestamp\u0026#34;: 1733308874996 } */ } } resp ResultData 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /** * 返回对象 * * 定义返回格式： * 3大标准： * code：由后端统一定义各种返回结果的状态码 * message：本次接口调用的结果描述 * data：本次返回的数据 * timestamp：接口调用的时间 * * @param \u0026lt;T\u0026gt; */ @Data @Accessors(chain = true) // 链式编程 public class ResultData\u0026lt;T\u0026gt; { private String code; private String message; private T data; private long timestamp; public ResultData() { this.timestamp = System.currentTimeMillis(); } /** * 为什么需要显式声明 \u0026lt;T\u0026gt;？ * 静态方法和实例方法的区别： * ResultData\u0026lt;T\u0026gt; 是一个泛型类，而 success(T data) 是静态方法。静态方法与类的实例无关，因此它无法直接访问类的实例化泛型类型。为了解决这个问题，静态方法需要自己声明泛型类型。 * 如果 success 方法是实例方法（即不加 static），那么它可以访问类级别的泛型 T，不需要再显式声明 \u0026lt;T\u0026gt;。但由于 success 是静态方法，它没有类实例，因此无法直接使用类的泛型类型。 */ public static \u0026lt;T\u0026gt; ResultData\u0026lt;T\u0026gt; success(T data) { ResultData\u0026lt;T\u0026gt; resultData = new ResultData\u0026lt;\u0026gt;(); resultData.setCode(ReturnCodeEnum.RC200.getCode()); resultData.setMessage(ReturnCodeEnum.RC200.getMessage()); resultData.setData(data); return resultData; } public static \u0026lt;T\u0026gt; ResultData\u0026lt;T\u0026gt; fail(String code,String message){ ResultData\u0026lt;T\u0026gt; resultData = new ResultData\u0026lt;\u0026gt;(); resultData.setCode(code); resultData.setMessage(message); resultData.setData(null); return resultData; } } ReturnCodeEnum 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 /** * HTTP返回的状态码 */ @Getter public enum ReturnCodeEnum { // 1、举值 /**操作失败**/ RC999(\u0026#34;999\u0026#34;,\u0026#34;操作XXX失败\u0026#34;), /**操作成功**/ RC200(\u0026#34;200\u0026#34;,\u0026#34;success\u0026#34;), /**服务降级**/ RC201(\u0026#34;201\u0026#34;,\u0026#34;服务开启降级保护,请稍后再试!\u0026#34;), /**热点参数限流**/ RC202(\u0026#34;202\u0026#34;,\u0026#34;热点参数限流,请稍后再试!\u0026#34;), /**系统规则不满足**/ RC203(\u0026#34;203\u0026#34;,\u0026#34;系统规则不满足要求,请稍后再试!\u0026#34;), /**授权规则不通过**/ RC204(\u0026#34;204\u0026#34;,\u0026#34;授权规则不通过,请稍后再试!\u0026#34;), RC375(\u0026#34;375\u0026#34;,\u0026#34;数学运算异常，请稍后重试\u0026#34;), /**access_denied**/ RC403(\u0026#34;403\u0026#34;,\u0026#34;无访问权限,请联系管理员授予权限\u0026#34;), /**access_denied**/ RC401(\u0026#34;401\u0026#34;,\u0026#34;匿名用户访问无权限资源时的异常\u0026#34;), RC404(\u0026#34;404\u0026#34;,\u0026#34;404页面找不到的异常\u0026#34;), /**服务异常**/ RC500(\u0026#34;500\u0026#34;,\u0026#34;系统异常，请稍后重试\u0026#34;), INVALID_TOKEN(\u0026#34;2001\u0026#34;,\u0026#34;访问令牌不合法\u0026#34;), ACCESS_DENIED(\u0026#34;2003\u0026#34;,\u0026#34;没有权限访问该资源\u0026#34;), CLIENT_AUTHENTICATION_FAILED(\u0026#34;1001\u0026#34;,\u0026#34;客户端认证失败\u0026#34;), USERNAME_OR_PASSWORD_ERROR(\u0026#34;1002\u0026#34;,\u0026#34;用户名或密码错误\u0026#34;), BUSINESS_ERROR(\u0026#34;1004\u0026#34;,\u0026#34;业务逻辑异常\u0026#34;), UNSUPPORTED_GRANT_TYPE(\u0026#34;1003\u0026#34;, \u0026#34;不支持的认证模式\u0026#34;); // 2、构造 /**自定义状态码**/ private final String code; /**自定义描述**/ private final String message; ReturnCodeEnum(String code, String message){ this.code = code; this.message = message; } // 3、传统遍历 public static ReturnCodeEnum getReturnCodeEnumV1(String code) { for (ReturnCodeEnum element : ReturnCodeEnum.values()) { if(element.getCode().equalsIgnoreCase(code)) { return element; } } return null; } // 3、流式计算遍历 public static ReturnCodeEnum getReturnCodeEnumV2(String code) { return Arrays.stream(ReturnCodeEnum.values()).filter(x -\u0026gt; x.getCode().equalsIgnoreCase(code)).findFirst().orElse(null); } // public static void main(String[] args) // { // System.out.println(getReturnCodeEnumV2(\u0026#34;200\u0026#34;)); // RC200这条枚举记录（RC200(\u0026#34;200\u0026#34;,\u0026#34;success\u0026#34;)） // System.out.println(getReturnCodeEnumV2(\u0026#34;200\u0026#34;).getCode()); // 200 // System.out.println(getReturnCodeEnumV2(\u0026#34;200\u0026#34;).getMessage()); // success // } } …………………………………………………………………… cloud-provider-payment8001（service） pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 \u0026lt;dependencies\u0026gt; \u0026lt;!--SpringBoot通用依赖模块--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringBoot集成druid连接池--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;druid-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Swagger3 调用方式 http://localhost:8001/swagger-ui/index.html --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springdoc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springdoc-openapi-starter-webmvc-ui\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--mybatis和springboot整合--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.spring.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--Mysql数据库驱动8 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--persistence--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.persistence\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;persistence-api\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--通用Mapper4--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;tk.mybatis\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mapper\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--hutool--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- fastjson2 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.fastjson2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson2\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--test--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringCloud consul discovery --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-consul-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringCloud consul config--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-consul-config\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-bootstrap\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 引入cloud-api-commons通用包 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xz.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-tracing指标追踪 2--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-tracing-bridge-brave适配zipkin的桥接包 3--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing-bridge-brave\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-observation 4--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-observation\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--feign-micrometer 5--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.github.openfeign\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;feign-micrometer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--zipkin-reporter-brave 6--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.zipkin.reporter2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;zipkin-reporter-brave\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; yml bootstrap：pom需要引入SpringCloud consul config、bootstrap、Consul、Micrometer+ZipKin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 # application.yml是用户级的资源配置项 # bootstrap.yml是系统级的，优先级更加高 # Spring Cloud会创建一个“Bootstrap Context”，作为Spring应用的`Application Context`的父上下文。 # 初始化的时候，`Bootstrap Context`负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的`Environment`。 # Bootstrap`属性有高优先级，默认情况下，它们不会被本地配置覆盖。 # `Bootstrap context`和`Application Context`有着不同的约定，所以新增了一个`bootstrap.yml`文件，保证`Bootstrap Context`和`Application Context`配置的分离。 # application.yml文件改为bootstrap.yml,这是很关键的或者两者共存 # 因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml spring: application: name: cloud-payment-service # Spring Cloud Consul for Service Discovery cloud: consul: host: localhost port: 8500 discovery: service-name: ${spring.application.name} # 8001以此名字入驻consul config: profile-separator: \u0026#39;-\u0026#39; # default value is \u0026#34;,\u0026#34;, We update \u0026#34;-\u0026#34; format: yaml management: zipkin: tracing: endpoint: http://localhost:9411/api/v2/spans # 固定写法 tracing: sampling: probability: 1.0 # 采样率默认为0.1，即十次只能有一次被记录下，值越大收集越及时 application 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 server: port: 8001 # ==========applicationName + druid-mysql8 driver=================== spring: datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/db2024?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;serverTimezone=GMT%2B8\u0026amp;rewriteBatchedStatements=true\u0026amp;allowPublicKeyRetrieval=true username: root password: 527644117 profiles: active: dev # 多环境Consul配置加载内容dev/prod，不写就是default配置 # ========================mybatis=================== mybatis: mapper-locations: classpath:mapper/*.xml type-aliases-package: com.xz.springcloud.entities configuration: map-underscore-to-camel-case: true resources.mapper.PayMapper.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026#34;-//mybatis.org//DTD Mapper 3.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026#34;\u0026gt; \u0026lt;mapper namespace=\u0026#34;com.xz.springcloud.mapper.PayMapper\u0026#34;\u0026gt; \u0026lt;resultMap id=\u0026#34;BaseResultMap\u0026#34; type=\u0026#34;com.xz.springcloud.entities.Pay\u0026#34;\u0026gt; \u0026lt;!-- WARNING - @mbg.generated --\u0026gt; \u0026lt;id column=\u0026#34;id\u0026#34; jdbcType=\u0026#34;INTEGER\u0026#34; property=\u0026#34;id\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;pay_no\u0026#34; jdbcType=\u0026#34;VARCHAR\u0026#34; property=\u0026#34;payNo\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;order_no\u0026#34; jdbcType=\u0026#34;VARCHAR\u0026#34; property=\u0026#34;orderNo\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;user_id\u0026#34; jdbcType=\u0026#34;INTEGER\u0026#34; property=\u0026#34;userId\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;amount\u0026#34; jdbcType=\u0026#34;DECIMAL\u0026#34; property=\u0026#34;amount\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;deleted\u0026#34; jdbcType=\u0026#34;TINYINT\u0026#34; property=\u0026#34;deleted\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;create_time\u0026#34; jdbcType=\u0026#34;TIMESTAMP\u0026#34; property=\u0026#34;createTime\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;update_time\u0026#34; jdbcType=\u0026#34;TIMESTAMP\u0026#34; property=\u0026#34;updateTime\u0026#34; /\u0026gt; \u0026lt;/resultMap\u0026gt; \u0026lt;/mapper\u0026gt; Main8001 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @SpringBootApplication @MapperScan(\u0026#34;com.xz.springcloud.mapper\u0026#34;) public class Main8001 { public static void main(String[] args) { SpringApplication.run(Main8001.class, args); /* 微服务： 1、建module 2、改pom 3、写yml 4、主启动 5、业务类 */ /* 入驻consul（服务注册中心）： 1、pom 2、yml */ } } config.Swagger3Config 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 @Configuration public class Swagger3Config { // 分组API @Bean public GroupedOpenApi PayApi() { return GroupedOpenApi.builder().group(\u0026#34;支付微服务模块\u0026#34;).pathsToMatch(\u0026#34;/pay/**\u0026#34;).build(); // 以pay开头 } @Bean public GroupedOpenApi OtherApi() { return GroupedOpenApi.builder().group(\u0026#34;其它微服务模块\u0026#34;).pathsToMatch(\u0026#34;/other/**\u0026#34;, \u0026#34;/others\u0026#34;).build(); } /* @Bean public GroupedOpenApi CustomerApi() { return GroupedOpenApi.builder().group(\u0026#34;客户微服务模块\u0026#34;).pathsToMatch(\u0026#34;/customer/**\u0026#34;, \u0026#34;/customers\u0026#34;).build(); } */ @Bean public OpenAPI docsOpenApi() { return new OpenAPI() .info(new Info().title(\u0026#34;cloud2024\u0026#34;) .description(\u0026#34;通用设计rest\u0026#34;) .version(\u0026#34;v1.0\u0026#34;)) .externalDocs(new ExternalDocumentation() .description(\u0026#34;www.atguigu.com\u0026#34;) .url(\u0026#34;https://yiyan.baidu.com/\u0026#34;)); } } controller PayController：基础的增删改查、获取Consul中配置的kv、Swagger3注解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 // Swagger3常用注解： // @Tag 标注位置：controller类：表示controller作用 // @Operation 标注位置：方法：描述方法作用 // @Schema 标注位置：model层的JavaBean：描述模型作用及每个属性 @Tag(name = \u0026#34;支付微服务模块\u0026#34;, description = \u0026#34;支付CRUD\u0026#34;) @RestController // @Controller + @ResponseBody @Slf4j @RequestMapping(\u0026#34;/pay\u0026#34;) public class PayController { @Resource private PayService payService; @PostMapping(\u0026#34;/add\u0026#34;) @Operation(summary = \u0026#34;新增\u0026#34;, description = \u0026#34;新增支付流水方法，json作参数\u0026#34;) public ResultData\u0026lt;String\u0026gt; addPay(@RequestBody Pay pay) { int i = payService.add(pay); return ResultData.success(\u0026#34;成功插入记录了，返回：\u0026#34; + i); } @DeleteMapping(\u0026#34;/del/{id}\u0026#34;) @Operation(summary = \u0026#34;删除\u0026#34;, description = \u0026#34;删除支付流水方法\u0026#34;) public ResultData\u0026lt;String\u0026gt; deletePay(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { return ResultData.success(\u0026#34;成功删除记录：\u0026#34; + payService.delete(id)); } @PutMapping(\u0026#34;/update\u0026#34;) @Operation(summary = \u0026#34;修改\u0026#34;, description = \u0026#34;修改支付流水方法\u0026#34;) public ResultData\u0026lt;String\u0026gt; updatePay(@RequestBody PayDTO payDTO) { // 与前端交互只能用PayDTO，到controller要将其封装为Pay再传给后端 Pay pay = new Pay(); BeanUtils.copyProperties(payDTO, pay); return ResultData.success(\u0026#34;成功修改记录：\u0026#34; + payService.update(pay)); } @GetMapping(\u0026#34;/get/{id}\u0026#34;) @Operation(summary = \u0026#34;按照ID查询流水\u0026#34;, description = \u0026#34;查询支付流水方法\u0026#34;) public ResultData\u0026lt;Pay\u0026gt; getPayById(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { // if (id == -4) throw new RuntimeException(\u0026#34;id不能为负数\u0026#34;); // 暂停62秒钟线程，测试Feign的默认调用超时时间 try { TimeUnit.SECONDS.sleep(62); } catch (InterruptedException e) { e.printStackTrace(); } return ResultData.success(payService.getById(id)); } @GetMapping(\u0026#34;/get\u0026#34;) public ResultData\u0026lt;List\u0026lt;Pay\u0026gt;\u0026gt; getPay() { return ResultData.success(payService.getAll()); } @GetMapping(\u0026#34;/error\u0026#34;) public ResultData\u0026lt;Integer\u0026gt; getPayError() { Integer integer = 200; try { System.out.println(\u0026#34;come in payerror test\u0026#34;); int age = 10 / 0; } catch (Exception e) { e.printStackTrace(); return ResultData.fail(ReturnCodeEnum.RC500.getCode(), e.getMessage()); } return ResultData.success(integer); } /* { \u0026#34;code\u0026#34;: \u0026#34;500\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;/ by zero\u0026#34;, \u0026#34;data\u0026#34;: null, \u0026#34;timestamp\u0026#34;: 1733309250087 } */ @Value(\u0026#34;${server.port}\u0026#34;) private String port; @GetMapping(\u0026#34;/get/info\u0026#34;) public String getInfoByConsul(@Value(\u0026#34;${xz.info}\u0026#34;) String xzInfo) { // xz.info为写在Consul相应环境中的yaml key return \u0026#34;xzInfo: \u0026#34; + xzInfo + \u0026#34; port: \u0026#34; + port; /* 如果没有在Consul中配置相应的key： -\u0026gt; { \u0026#34;code\u0026#34;: \u0026#34;500\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Could not resolve placeholder \u0026#39;xz.info\u0026#39; in value \\\u0026#34;${xz.info}\\\u0026#34;\u0026#34;, \u0026#34;data\u0026#34;: null, \u0026#34;timestamp\u0026#34;: 1733376396579 } */ } } PayCircuitController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 @RestController @RequestMapping(\u0026#34;/pay\u0026#34;) public class PayCircuitController { /** * Resilience4j CircuitBreaker */ @GetMapping(\u0026#34;/circuit/{id}\u0026#34;) public String myCircuit(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { if (id == -4) throw new RuntimeException(\u0026#34;id 不能为负数\u0026#34;); if (id == 9999) { try { TimeUnit.SECONDS.sleep(5); } catch (InterruptedException e) { e.printStackTrace(); } } return \u0026#34;Hello, circuit! \u0026#34; + \u0026#34;\\t\u0026#34; + IdUtil.simpleUUID(); } /** * Resilience4j Bulkhead */ @GetMapping(\u0026#34;/bulkhead/{id}\u0026#34;) public String myBulkhead(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { if (id == -4) throw new RuntimeException(\u0026#34;bulkhead id 不能为负数\u0026#34;); if (id == 9999) { try { TimeUnit.SECONDS.sleep(5); } catch (InterruptedException e) { e.printStackTrace(); } } return \u0026#34;Hello, bulkhead! \u0026#34; + \u0026#34;\\t\u0026#34; + IdUtil.simpleUUID(); } /** * Resilience4j ratelimit */ @GetMapping(\u0026#34;/ratelimit/{id}\u0026#34;) public String myRatelimit(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { return \u0026#34;Hello, ratelimit! \u0026#34; + \u0026#34;\\t\u0026#34; + IdUtil.simpleUUID(); } } PayMicrometerController 1 2 3 4 5 6 7 8 9 @RestController @RequestMapping(\u0026#34;/pay\u0026#34;) public class PayMicrometerController { @GetMapping(\u0026#34;/micrometer/{id}\u0026#34;) public String myMicrometer(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { return \u0026#34;Hello, welcome to myMicrometer \u0026#34; + id + IdUtil.simpleUUID(); } } GatewayController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 @RestController @RequestMapping(\u0026#34;/pay\u0026#34;) public class PayGatewayController { @Resource private PayService payService; @GetMapping(\u0026#34;/gateway/get/{id}\u0026#34;) public ResultData\u0026lt;Pay\u0026gt; getById(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { Pay pay = payService.getById(id); return ResultData.success(pay); } @GetMapping(\u0026#34;/gateway/info\u0026#34;) public ResultData\u0026lt;String\u0026gt; getGatewayInfo() { return ResultData.success(\u0026#34;gateway info test: \u0026#34; + IdUtil.simpleUUID()); } @GetMapping(\u0026#34;/gateway/filter\u0026#34;) public ResultData\u0026lt;String\u0026gt; getGatewayFilter(HttpServletRequest request) { String res = \u0026#34;\u0026#34;; Enumeration\u0026lt;String\u0026gt; headers = request.getHeaderNames(); // 获得请求头名字的集合类 while (headers.hasMoreElements()) { String headName = headers.nextElement(); String headValue = request.getHeader(headName); System.out.println(\u0026#34;请求头名：\u0026#34; + headName + \u0026#34;\\t\\t\u0026#34; + \u0026#34;请求头值：\u0026#34; + headValue); /* ... 请求头名：x-request-xz1 请求头值：xzVal1 请求头名：x-request-xz2 请求头值：xzVal2 ... */ if (headName.equalsIgnoreCase(\u0026#34;X-Request-xz1\u0026#34;) || headName.equalsIgnoreCase(\u0026#34;X-Request-xz2\u0026#34;)) { res = res + headName + \u0026#34;\\t\u0026#34; + headValue + \u0026#34; \u0026#34;; } } System.out.println(\u0026#34;==============================================================\u0026#34;); String customerId = request.getParameter(\u0026#34;customerId\u0026#34;); System.out.println(\u0026#34;request Parameter customerId：\u0026#34; + customerId); String customerName = request.getParameter(\u0026#34;customerName\u0026#34;); System.out.println(\u0026#34;request Parameter customerName：\u0026#34; + customerName); System.out.println(\u0026#34;==============================================================\u0026#34;); // request Parameter customerId：9527001 // request Parameter customerName：null return ResultData.success(\u0026#34;getGatewayFilter 过滤器 test：\u0026#34; + res + \u0026#34;\\t\u0026#34; + DateUtil.now()); /* { \u0026#34;code\u0026#34;: \u0026#34;200\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;success\u0026#34;, \u0026#34;data\u0026#34;: \u0026#34;getGatewayFilter 过滤器 test：x-request-xz1\\txzVal1 x-request-xz2\\txzVal2 \\t2024-12-10 10:51:13\u0026#34;, \u0026#34;timestamp\u0026#34;: 1733799073903 } */ } } service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 public interface PayService { int add(Pay pay); int delete(Integer id); int update(Pay pay); Pay getById(Integer id); List\u0026lt;Pay\u0026gt; getAll(); } @Service public class PayServiceImpl implements PayService { @Resource private PayMapper payMapper; @Override public int add(Pay pay) { return payMapper.insertSelective(pay); // null的属性不会保存，会使用数据库默认值 } @Override public int delete(Integer id) { return payMapper.deleteByPrimaryKey(id); } @Override public int update(Pay pay) { return payMapper.updateByPrimaryKeySelective(pay); } @Override public Pay getById(Integer id) { return payMapper.selectByPrimaryKey(id); } @Override public List\u0026lt;Pay\u0026gt; getAll() { return payMapper.selectAll(); } } mapper.Paymapper 1 2 public interface PayMapper extends Mapper\u0026lt;Pay\u0026gt; { } entities.Pay表名：t_pay * 表注释：支付交易表 */ @Table(name = \u0026#34;t_pay\u0026#34;) @Schema(title = \u0026#34;支付交易表Entity\u0026#34;) public class Pay { @Id @GeneratedValue(generator = \u0026#34;JDBC\u0026#34;) @Schema(title = \u0026#34;主键\u0026#34;) private Integer id; /** * 支付流水号 */ @Column(name = \u0026#34;pay_no\u0026#34;) @Schema(title = \u0026#34;支付流水号\u0026#34;) private String payNo; /** * 订单流水号 */ @Column(name = \u0026#34;order_no\u0026#34;) @Schema(title = \u0026#34;订单流水号\u0026#34;) private String orderNo; /** * 用户账号ID */ @Column(name = \u0026#34;user_id\u0026#34;) @Schema(title = \u0026#34;用户账号ID\u0026#34;) private Integer userId; /** * 交易金额 */ @Schema(title = \u0026#34;交易金额\u0026#34;) private BigDecimal amount; /** * 删除标志，默认0不删除，1删除 */ private Byte deleted; /** * 创建时间 */ @Schema(title = \u0026#34;创建时间\u0026#34;) @Column(name = \u0026#34;create_time\u0026#34;) @JsonFormat(pattern = \u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;, timezone = \u0026#34;GMT+8\u0026#34;) // 完善从数据库中查出并返回的时间格式 private Date createTime; /** * 更新时间 */ @Schema(title = \u0026#34;更新时间\u0026#34;) @Column(name = \u0026#34;update_time\u0026#34;) @JsonFormat(pattern = \u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;, timezone = \u0026#34;GMT+8\u0026#34;) private Date updateTime; /** * @return id */ public Integer getId() { return id; } /** * @param id */ public void setId(Integer id) { this.id = id; } /** * 获取支付流水号 * * @return payNo - 支付流水号 */ public String getPayNo() { return payNo; } /** * 设置支付流水号 * * @param payNo 支付流水号 */ public void setPayNo(String payNo) { this.payNo = payNo; } /** * 获取订单流水号 * * @return orderNo - 订单流水号 */ public String getOrderNo() { return orderNo; } /** * 设置订单流水号 * * @param orderNo 订单流水号 */ public void setOrderNo(String orderNo) { this.orderNo = orderNo; } /** * 获取用户账号ID * * @return userId - 用户账号ID */ public Integer getUserId() { return userId; } /** * 设置用户账号ID * * @param userId 用户账号ID */ public void setUserId(Integer userId) { this.userId = userId; } /** * 获取交易金额 * * @return amount - 交易金额 */ public BigDecimal getAmount() { return amount; } /** * 设置交易金额 * * @param amount 交易金额 */ public void setAmount(BigDecimal amount) { this.amount = amount; } /** * 获取删除标志，默认0不删除，1删除 * * @return deleted - 删除标志，默认0不删除，1删除 */ public Byte getDeleted() { return deleted; } /** * 设置删除标志，默认0不删除，1删除 * * @param deleted 删除标志，默认0不删除，1删除 */ public void setDeleted(Byte deleted) { this.deleted = deleted; } /** * 获取创建时间 * * @return createTime - 创建时间 */ public Date getCreateTime() { return createTime; } /** * 设置创建时间 * * @param createTime 创建时间 */ public void setCreateTime(Date createTime) { this.createTime = createTime; } /** * 获取更新时间 * * @return updateTime - 更新时间 */ public Date getUpdateTime() { return updateTime; } /** * 设置更新时间 * * @param updateTime 更新时间 */ public void setUpdateTime(Date updateTime) { this.updateTime = updateTime; } } cloud-provider-payment8002（service） 与8001大体上一致 1 2 3 4 5 6 7 8 9 10 11 12 // Main8002 @SpringBootApplication @MapperScan(\u0026#34;com.xz.springcloud.mapper\u0026#34;) public class Main8002 { public static void main(String[] args) { SpringApplication.run(Main8002.class, args); } } // application.yml server: port: 8002 cloud-consumer-order80（deprecated，使用RestTemplate转发给微服务） pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 \u0026lt;dependencies\u0026gt; \u0026lt;!--web + actuator--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--hutool-all--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--fastjson2--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.fastjson2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson2\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- swagger3 调用方式 http://localhost:8001/swagger-ui/index.html --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springdoc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springdoc-openapi-starter-webmvc-ui\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringCloud consul discovery --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-consul-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--loadbalancer--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 引入cloud-api-commons通用包 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xz.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; application.yml：Consul 1 2 3 4 5 6 7 8 9 10 11 12 13 server: port: 80 spring: application: name: cloud-consumer-order # Spring Cloud Consul for Service Discovery cloud: consul: host: localhost port: 8500 discovery: service-name: ${spring.application.name} # 8001以此名字入驻consul Main80 1 2 3 4 5 6 @SpringBootApplication public class Main80 { public static void main(String[] args) { SpringApplication.run(Main80.class, args); } } config.RestTemplateConfig 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * Spring 框架中提供的一个类，用于简化与 RESTful 服务进行 HTTP 请求和响应的交互。它是一种方便的客户端工具，可以通过简单的方法调用 REST API，并处理请求和响应的数据。 */ @Configuration // @LoadBalancerClient(value = \u0026#34;cloud-payment-service\u0026#34;, configuration = RestTemplateConfig.class) // 区分大小写，要跟consul里名字保持一样 public class RestTemplateConfig { @Bean @LoadBalanced // I/O error on GET request for \u0026#34;http://cloud-payment-service/pay/get/1\u0026#34; -\u0026gt; 一旦通过微服务名字调用，默认后面有多个微服务，需要开启负载均衡 public RestTemplate restTemplate() { return new RestTemplate(); } // 将默认的负载均衡轮询算法修改为随机 // @Bean // ReactiveLoadBalancer\u0026lt;ServiceInstance\u0026gt; randomLoadBalancer(Environment environment, // LoadBalancerClientFactory loadBalancerClientFactory) { // String name = environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME); // return new RandomLoadBalancer(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name); // } } controller.OrderController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @RestController @RequestMapping(\u0026#34;/consumer\u0026#34;) public class OrderController { // public static final String PaymentServ_URL = \u0026#34;http://localhost:8001\u0026#34;; public static final String PaymentServ_URL = \u0026#34;http://cloud-payment-service\u0026#34;; // consul服务注册中心上的微服务名字 @Resource private RestTemplate restTemplate; @PostMapping(\u0026#34;/pay/add\u0026#34;) public ResultData addOrder(@RequestBody PayDTO payDTO) { // 类似于代理，也可以理解为请求转发，接收来自客户端的请求，然后将其转发给支付微服务，最后返回微服务的响应给客户端。 // 通过这种方式，系统可以轻松实现不同微服务之间的通信，保持松耦合和清晰的模块划分。 // 向目标 URL 发起一个 POST 请求，发送的请求体是 payDTO，并期望返回一个 ResultData 类型的响应。 // 目标微服务的地址，假设 PaymentServ_URL 是微服务的基本 URL（比如 http://payment-service/api），/pay/add 是支付服务处理支付请求的接口路径。 // payDTO 包含了用户请求的支付数据，它会被 RestTemplate 自动序列化成请求体（通常是 JSON 格式）。 return restTemplate.postForObject(PaymentServ_URL + \u0026#34;/pay/add\u0026#34;, payDTO, ResultData.class); // 发送 POST 请求 } @DeleteMapping(\u0026#34;/pay/del/{id}\u0026#34;) public ResultData deleteOrder(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { restTemplate.delete(PaymentServ_URL + \u0026#34;/pay/del/\u0026#34; + id, id); return ResultData.success(null); } @PutMapping(\u0026#34;/pay/update\u0026#34;) public ResultData updateOrder(@RequestBody PayDTO payDTO) { restTemplate.put(PaymentServ_URL + \u0026#34;/pay/update\u0026#34;, payDTO); return ResultData.success(null); } @GetMapping(\u0026#34;/pay/get/{id}\u0026#34;) public ResultData getOrder(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { return restTemplate.getForObject(PaymentServ_URL + \u0026#34;/pay/get/\u0026#34; + id, ResultData.class, id); // 发送 GET 请求 } @GetMapping(\u0026#34;/pay/get/info\u0026#34;) public String getInfoByConsul() { return restTemplate.getForObject(PaymentServ_URL + \u0026#34;/pay/get/info\u0026#34;, String.class); } @Resource private DiscoveryClient discoveryClient; /** * 原理：使用DiscoveryClient动态获取所有上线的服务器列表 * @return */ @GetMapping(\u0026#34;/discovery\u0026#34;) public String discovery() { List\u0026lt;String\u0026gt; services = discoveryClient.getServices(); // 获取consul上全部services for (String ele : services) { System.out.println(ele); // cloud-consumer-order、cloud-payment-service、consul } System.out.println(\u0026#34;====================================\u0026#34;); List\u0026lt;ServiceInstance\u0026gt; instances = discoveryClient.getInstances(\u0026#34;cloud-payment-service\u0026#34;); for (ServiceInstance instance : instances) { System.out.println(instance.getServiceId() + \u0026#34;\\t\u0026#34; + instance.getHost() + \u0026#34;\\t\u0026#34; + instance.getPort() + \u0026#34;\\t\u0026#34; + instance.getUri()); // cloud-payment-service Augenstern 8001 http://Augenstern:8001 // cloud-payment-service Augenstern 8002 http://Augenstern:8002 // 就会在这两个服务器上做负载均衡 } return instances.get(0).getServiceId() + \u0026#34;: \u0026#34; + instances.get(0).getPort(); // cloud-payment-service: 8001 } } cloud-consumer-feign-order80（使用OpenFeign转发给微服务） pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 \u0026lt;dependencies\u0026gt; \u0026lt;!--web + actuator--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--hutool-all--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--fastjson2--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.fastjson2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson2\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- swagger3 调用方式 http://localhost:8001/swagger-ui/index.html --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springdoc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springdoc-openapi-starter-webmvc-ui\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringCloud consul discovery --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-consul-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--openfeign--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-openfeign\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- httpclient5--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.httpcomponents.client5\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;httpclient5\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- feign-hc5--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.github.openfeign\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;feign-hc5\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;13.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--resilience4j-circuitbreaker--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-circuitbreaker-resilience4j\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 由于断路保护等需要AOP实现，所以必须导入AOP包 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-aop\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--resilience4j-bulkhead--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.github.resilience4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;resilience4j-bulkhead\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--resilience4j-ratelimiter--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.github.resilience4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;resilience4j-ratelimiter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-tracing指标追踪 2--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-tracing-bridge-brave适配zipkin的桥接包 3--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing-bridge-brave\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-observation 4--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-observation\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--feign-micrometer 5--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.github.openfeign\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;feign-micrometer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--zipkin-reporter-brave 6--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.zipkin.reporter2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;zipkin-reporter-brave\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 引入cloud-api-commons通用包 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xz.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; application.yml：配置Consul、OpenFeign、Resilience4j、Micrometer+ZipKin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 server: port: 80 spring: application: name: cloud-consumer-openfeign-order # Spring Cloud Consul for Service Discovery cloud: consul: host: localhost port: 8500 discovery: service-name: ${spring.application.name} # 8001以此名字入驻consul prefer-agent-address: true # 优先使用服务ip进行注册 openfeign: client: config: # default: # （全局） # # 连接超时时间 # connectTimeout: 3000 # # 读取超时时间 # readTimeout: 3000 cloud-payment-service: # 给单个服务指定会覆盖全局的 connectTimeout: 20000 readTimeout: 20000 # 修改默认HttpClient -\u0026gt; Apache HttpClient5开启，提升性能 httpclient: hc5: enabled: true # 替换前为默认的 HttpClient + HttpURLConnection # 替换后为 hc.client5 # 请求/响应压缩：支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗 compression: request: enabled: true min-request-size: 2048 # 最小触发压缩的大小 mime-types: text/xml,application/xml,application/json # 触发压缩数据类型 response: enabled: true # 2024-12-05T19:44:14.215+08:00 DEBUG 13360 --- [cloud-consumer-openfeign-order] [p-nio-80-exec-5] com.xz.springcloud.apis.PayFeignAPi : [PayFeignAPi#getPayInfo] Accept-Encoding: gzip # 开启circuitbreaker和分组激活 circuitbreaker: enabled: false group: enabled: false # 默认不开启分组，若开启，默认的分组策略是精确优先，若设置了分组策略则按设置的来 # Feign日志打印功能（logging.level + 含有@FeignClient注解的全接口名 + debug） logging: level: com: xz: springcloud: apis: PayFeignAPi: debug # # 按照次数：COUNT_BASED 的例子 # # 6次访问中当执行方法的失败率达到50%时CircuitBreaker将进入开启OPEN状态(保险丝跳闸断电)拒绝所有请求。 # # 等待5秒后，CircuitBreaker 将自动从开启OPEN状态过渡到半开HALF_OPEN状态，允许一些请求通过以测试服务是否恢复正常。 # # 如还是异常CircuitBreaker 将重新进入开启OPEN状态；如正常将进入关闭CLOSE闭合状态恢复正常处理请求。 # resilience4j: # circuitbreaker: # configs: # default: # failure-rate-threshold: 50 # 调用失败率达到50%时打开断路器，超过失败请求百分⽐时CircuitBreaker变为OPEN状态 # sliding-window-type: COUNT_BASED # 滑动窗口的类型 # sliding-window-size: 6 # 滑动窗⼝的⼤⼩，配置COUNT_BASED表示6个请求，配置TIME_BASED表示6秒 # minimum-number-of-calls: 6 # 断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。如果minimumNumberOfCalls为10，则必须最少记录10个样本，然后才能计算失败率。如果只记录了9次调用，即使所有9次调用都失败，断路器也不会开启 # automatic-transition-from-open-to-half-open-enabled: false # 是否启用自动从开启状态过渡到半开状态，默认值为true。如果启用，CircuitBreaker将自动从开启状态过渡到半开状态，并允许一些请求通过以测试服务是否恢复正常 # wait-duration-in-open-state: 5s # 从OPEN到HALF_OPEN状态需要等待的时间（不管怎么配置，都会在一定时间内恢复到半开） # permitted-number-of-calls-in-half-open-state: 2 # 半开状态允许的最大请求数，默认值为10。在半开状态下，CircuitBreaker将允许最多permittedNumberOfCallsInHalfOpenState个请求通过，如果调用失败率再次达到50%，CircuitBreaker将重新进入开启状态 # record-exceptions: # - java.lang.Exception # instances: # cloud-payment-service: # base-config: default # resilience4j: # timelimiter: # configs: # default: # # 适合高并发场景下接口响应较慢导致拖垮整个服务的其他接口 # timeout-duration: 10s # timelimiter默认限制远程调用1s，超过1s就超时异常，配置了降级，就走降级逻辑（最高优先级） # circuitbreaker: # configs: # default: # failure-rate-threshold: 50 # 调用失败率达到50%时打开断路器，超过失败请求百分⽐时CircuitBreaker变为OPEN状态 # sliding-window-type: TIME_BASED # 滑动窗口的类型 # sliding-window-size: 2 # 滑动窗⼝的⼤⼩，配置TIME_BASED表示2秒 # minimum-number-of-calls: 2 # 断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。 # wait-duration-in-open-state: 5s # 从OPEN到HALF_OPEN状态需要等待的时间（不管怎么配置，都会在一定时间内恢复到半开） # permitted-number-of-calls-in-half-open-state: 2 # 半开状态允许的最大请求数，默认值为10。在半开状态下，CircuitBreaker将允许最多permittedNumberOfCallsInHalfOpenState个请求通过，如果调用失败率再次达到50%，CircuitBreaker将重新进入开启状态 # slow-call-duration-threshold: 2s # 满调用时间阈值，高于阈值视为慢调用并增加慢调用比例 # slow-call-rate-threshold: 30 # 慢调用百分比峰值，断路器把调用时间大于slow-call-duration-threshold视为慢调用，当慢调用比例高于此阈值，断路器打开，并开启服务降级 # record-exceptions: # - java.lang.Exception # instances: # cloud-payment-service: # base-config: default # SEMAPHORE # resilience4j: # bulkhead: # configs: # default: # max-concurrent-calls: 2 # 允许线程并发执行的最大数量 # max-wait-duration: 1s # 当达到并发调用数量时，新的线程的阻塞时间，只愿意等待1s，超时进舱壁兜底fallback # instances: # cloud-payment-service: # base-config: default # timelimiter: # configs: # default: # timeout-duration: 20s # 为了保证测试故意延长 # THREADPOOL 注意，由于THREADPOOL会新启线程池，需要把spring.cloud.openfeign.circuitbreaker.group.enabled设为false，新启线程和原来主线程脱离 # resilience4j: # timelimiter: # configs: # default: # timeout-duration: 10s # thread-pool-bulkhead: # configs: # default: # core-thread-pool-size: 1 # max-thread-pool-size: 1 # queue-capacity: 1 # 线程池内最多容纳1个，等待队列最多容纳1个，故最多容纳2个（核心线程池内存常驻，其余（若有）线程池只是临时的，超过时间不用就会回收） # instances: # cloud-payment-service: # base-config: default resilience4j: ratelimiter: configs: default: limit-for-period: 2 # 在一次刷新周期内，允许执行的最大请求数 limit-refresh-period: 1s # 限流器每隔limitRefreshPeriod刷新一次，将允许处理的最大请求数量重置为limitForPeriod timeout-duration: 1 # 线程等待权限的默认等待时间 instances: cloud-payment-service: base-config: default management: zipkin: tracing: endpoint: http://localhost:9411/api/v2/spans # 固定写法 tracing: sampling: probability: 1.0 # 采样率默认为0.1，即十次只能有一次被记录下，值越大收集越及时 MainOpenFeign80 1 2 3 4 5 6 7 @SpringBootApplication @EnableFeignClients // 启用Feign客户端，定义服务+绑定接口，以声明式的方法优雅而简单地实现服务调用 public class MainOpenFeign80 { public static void main(String[] args) { SpringApplication.run(MainOpenFeign80.class, args); } } config.FeignConfig 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Configuration public class FeignConfig { /** * OpenFeign的重试机制 */ @Bean public Retryer myRetryer() { return Retryer.NEVER_RETRY; // Feign默认配置是不走重试策略的 // 最大请求次数为3(1+2)，初始间隔时间为100ms，重试间最大间隔时间为1s // return new Retryer.Default(100, 1, 3); } /** * OpenFeign的日志打印功能 */ @Bean Logger.Level feignLoggerLevel() { return Logger.Level.FULL; } } controller OrderController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @RestController @RequestMapping(\u0026#34;/feign\u0026#34;) public class OrderController { @Resource private PayFeignAPi payFeignAPi; @PostMapping(\u0026#34;/pay/add\u0026#34;) public ResultData addOrder(@RequestBody PayDTO payDTO) { // 1、模拟本地addOrder新增订单成功（省略sql操作） // 2、在开启addPay支付微服务远程调用 // 当应用启动时，Feign使用Java动态代理机制生成接口的实现，这个实现由SpringCLoud方法提供支持 // Feign客户端在内部构建了请求的详细信息，并将接口方法调用转换为HTTP调用 return payFeignAPi.addPay(payDTO); } @GetMapping(\u0026#34;/pay/get/{id}\u0026#34;) public ResultData getPayInfo(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { // 1、支付微服务远程调用，按照id查询订单支付流水信息 ResultData resultData = null; try { System.out.println(\u0026#34;调用开始：\u0026#34; + DateUtil.now()); resultData = payFeignAPi.getPayInfo(id); } catch (Exception e) { e.printStackTrace(); System.out.println(\u0026#34;调用结束：\u0026#34; + DateUtil.now()); ResultData.fail(ReturnCodeEnum.RC500.getCode(), e.getMessage()); // 测试超时控制 // 调用开始：2024-12-05 18:52:31 // 调用结束：2024-12-05 18:53:31 // Feign默认超时时间60s } return resultData; } @GetMapping(\u0026#34;/pay/get/info\u0026#34;) public String mylb() { return payFeignAPi.mylb(); } } OrderCircuitController：CircuitBreaker、BulkHead、RateLimit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 @RestController public class OrderCircuitController { @Resource private PayFeignAPi payFeignAPi; @GetMapping(\u0026#34;/feign/pay/circuit/{id}\u0026#34;) @CircuitBreaker(name = \u0026#34;cloud-payment-service\u0026#34;, fallbackMethod = \u0026#34;myCircuitFallback\u0026#34;) // 与yml的instances名字保持一致 public String myCircuitBreaker(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { return payFeignAPi.myCircuit(id); } /** * 报错就会进入，超过50%才会熔断（断开），后面就算不报错了，仍会返回失败 * 服务降级后的兜底处理方法 */ public String myCircuitFallback(Throwable t) { return \u0026#34;myCircuitFallback 系统繁忙，请稍后再试\u0026#34;; } @GetMapping(\u0026#34;/feign/pay/bulkhead/{id}\u0026#34;) @Bulkhead(name = \u0026#34;cloud-payment-service\u0026#34;, fallbackMethod = \u0026#34;myBulkheadFallback\u0026#34;, type = Bulkhead.Type.SEMAPHORE) public String myBulkhead(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { return payFeignAPi.myBulkhead(id); } public String myBulkheadFallback(Throwable t) { return \u0026#34;myBulkheadFallback 隔板超出最大数量限制，系统繁忙，请稍后再试\u0026#34;; } @GetMapping(\u0026#34;/feign/pay/bulkhead_th/{id}\u0026#34;) @Bulkhead(name = \u0026#34;cloud-payment-service\u0026#34;, fallbackMethod = \u0026#34;myBulkheadFallbackTh\u0026#34;, type = Bulkhead.Type.THREADPOOL) public CompletableFuture\u0026lt;String\u0026gt; myBulkheadTh(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { System.out.println(Thread.currentThread().getName() + \u0026#34;\\t\u0026#34; + \u0026#34;---开始进入---\u0026#34;); try { TimeUnit.SECONDS.sleep(3); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName() + \u0026#34;\\t\u0026#34; + \u0026#34;---准备离开---\u0026#34;); // bulkhead-cloud-payment-service-1 ---开始进入--- // bulkhead-cloud-payment-service-1 ---准备离开--- return CompletableFuture.supplyAsync(() -\u0026gt; payFeignAPi.myBulkhead(id) + \u0026#34;\\t\u0026#34; + \u0026#34;THREADPOOL\u0026#34;); } public CompletableFuture\u0026lt;String\u0026gt; myBulkheadFallbackTh(Integer id, Throwable t) { return CompletableFuture.supplyAsync(() -\u0026gt; \u0026#34;myBulkheadFallbackTh 隔板超出最大数量限制，系统繁忙，请稍后再试\u0026#34;); } @GetMapping(\u0026#34;/feign/pay/ratelimit/{id}\u0026#34;) @RateLimiter(name = \u0026#34;cloud-payment-service\u0026#34;, fallbackMethod = \u0026#34;myRatelimitFallback\u0026#34;) public String myRatelimit(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { return payFeignAPi.myRatelimit(id); } public String myRatelimitFallback(Throwable t) { return \u0026#34;myRatelimitFallback 你被限流了，禁止访问\u0026#34;; } } OrderMicrometerController：Micrometer 1 2 3 4 5 6 7 8 9 10 11 @RestController public class OrderMicrometerController { @Resource private PayFeignAPi payFeignAPi; @GetMapping(\u0026#34;/feign/micrometer/{id}\u0026#34;) public String myMicrometer(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { return payFeignAPi.myMicrometer(id); } } OrderMicrometerController：GateWay 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 @RestController public class OrderGatewayController { @Resource private PayFeignAPi payFeignAPi; @GetMapping(\u0026#34;/feign/pay/gateway/get/{id}\u0026#34;) public ResultData getById(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { return payFeignAPi.getById(id); } @GetMapping(\u0026#34;/feign/pay/gateway/info\u0026#34;) public ResultData\u0026lt;String\u0026gt; getGatewayInfo() { return payFeignAPi.getGatewayInfo(); } } cloud-gateway9527（网关） pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;dependencies\u0026gt; \u0026lt;!--gateway--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-gateway\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--服务注册发现consul discovery,网关也要注册进服务注册中心统一管控--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-consul-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 指标监控健康检查的actuator,网关是响应式编程删除掉spring-boot-starter-web dependency--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; application.yml：配置Consul、routes=(id+uri+predicates+filters)*n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 server: port: 9527 spring: application: name: cloud-gateway # 以微服务注册进consul或nacos服务列表内 cloud: consul: # 配置consul地址 host: localhost port: 8500 discovery: prefer-agent-address: true service-name: ${spring.application.name} gateway: # 所有的请求都会发给网关，由网关进行转发 routes: - id: pay_route1 # 路由的ID（类似于mysql的主键），没有固定规则但要求唯一，建议配合服务名 # uri: http://localhost:8001 # 匹配后提供服务的路由地址 uri: lb://cloud-payment-service # 以微服务名字动态获取uri # lb 代表 负载均衡器（Load Balancer）。这表示请求会通过负载均衡器转发到 cloud-payment-service 服务，而不是直接指定一个固定的 IP 地址或主机名。 # lb://：这个前缀表示使用负载均衡器来解析服务的地址，负载均衡器会根据一定的算法（例如轮询、最小连接数等）将请求转发到 cloud-payment-service 的不同实例。 # 此时将8001改为8007，依然可以通过OpenFeign对服务访问 predicates: # 只有满足了断言下的所有条件才能正常访问到uri - Path=/pay/gateway/get/** # 路径相匹配的进行路由 - After=2024-12-09T16:33:19.186588300+08:00[GMT+08:00] # 在此时间之后才能访问：到点秒杀 # Before Between=XXX,XXX # - Cookie=username,xz # cmd：curl http://localhost:9527/pay/gateway/get/1 --cookie \u0026#34;username=xz\u0026#34; 直接访问9527才生效，当访问80再访问9527则不行，因为这样Cookie只传到了80端口（实际工作中不会有用Feign调网关的情况发生，故直接访问网关没有问题） # - Header=X-Request-Id, \\d+ # cmd：curl http://localhost:9527/pay/gateway/get/1 -H \u0026#34;X-Request-Id:123456\u0026#34; # 一个属性名称，一个正则表达式，属性名与正则匹配才符合条件：请求头要有X-Request-Id属性且值为正数 同样只有直接访问9527才生效 # - Host=**.xz.com # cmd：curl http://localhost:9527/pay/gateway/get/3 -H \u0026#34;Host:a.www.xz.com\u0026#34; 接收一组匹配的域名列表，这个模板是一个ant分隔的模板，用.作为分隔符 # - Query=username, \\d+ # http://localhost:9527/pay/gateway/get/1?username=23 要求有查询参数且符合属性值，一个是属性名、一个是属性值，属性值可以是正则 # - RemoteAddr=10.249.94.1/24 # IPv4地址 10.249.94.181 http://10.249.94.181:9527/pay/gateway/get/1 外部访问IP限制，最大跨度不超过32，目前是1-24，CIDR表示法 # - Method=POST # 限制请求方法只能为POST # Fully Expanded Arguments # - name: My # args: # userType: diamond # http://localhost:9527/pay/gateway/get/1?userType=diamond # Shortcut Configuration # - My=diamond - id: pay_route2 # uri: http://localhost:8001 uri: lb://cloud-payment-service # 动态路由 predicates: - Path=/pay/gateway/info/** - id: pay_route3 uri: lb://cloud-payment-service predicates: - Path=/pay/gateway/filter/** # 默认的正确地址 # - Path=/gateway/filter/** # 拆分为 PrefixPath + Path # - Path=/XYZ/abc/{segment} # {segment}为占位符，最后会被setPath取代 filters: # # 往请求中添加请求头参数 # - AddRequestHeader=X-Request-xz1,xzVal1 # 请求头kv，若含有多个kv则重写一行设置 # - AddRequestHeader=X-Request-xz2,xzVal2 # # 往请求中删除请求头参数 # - RemoveRequestHeader=sec-fetch-site # 删除 请求头名：sec-fetch-site 请求头值：none # # 修改请求头参数 # - SetRequestHeader=sec-fetch-mode,xzxzxzxzxzxz # 请求头名：sec-fetch-mode 请求头值修改为xzxzxzxzxzxz # # 新增请求参数 # - AddRequestParameter=customerId,9527001 # 新增请求参数Parameter，kv（默认值），如果有传过来的请求参数则会将此覆盖 # # 删除请求参数 # - RemoveRequestParameter=customName # 删除url请求参数的value -\u0026gt; null # # 新增响应头参数 # - AddResponseHeader=X-Response-xz,xzzzzzz # x-response-xz: xzzzzzz # # 修改响应头参数 # - SetResponseHeader=Date,2099-11-11 # date: 2099-11-11 # # 删除响应头参数 # - RemoveResponseHeader=Content-Type # 将默认自带Content-Type删除 # - PrefixPath=/pay # http://localhost:9527/pay/gateway/filter 过滤器统一管理前缀 # - SetPath=/pay/gateway/{segment} # 浏览器访问的地址：http://localhost:9527/XYZ/abc/filter 实际访问的地址：http://localhost:9527/pay/gateway/filter # - RedirectTo=302,https://www.baidu.com/ # 访问http://localhost:9527/pay/gateway/filter跳转到https://www.baidu.com/ 302重定向状态码 # 自定义filter就是作用于全部routes的 spring.cloud.gateway.default-filters... - My=xz # xz就是Config里面的status http://localhost:9527/pay/gateway/filter -\u0026gt; 400 http://localhost:9527/pay/gateway/filter?xz=??才能访问（过滤器可以替代断言，但是断言不能替代过滤器） Main9527 1 2 3 4 5 6 7 @SpringBootApplication public class Main9527 { public static void main(String[] args) { SpringApplication.run(Main9527.class, args); // 网关，不写任何业务代码，网关和业务无关 } } mygateway MyRoutePredicateFactory：自定义路由断言 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /** * 需求说明：自定义配置会员等级userType，按照钻/金/银和yml配置的会员等级，以适配是否可以访问 * * 约定自定义的路由断言工厂必须要以RoutePredicateFactory结尾，前面的部分将会形如[After][Before][Between]...出现 * 因此这个路由断言工厂将会显示为[My] * 2024-12-10T10:17:10.899+08:00 INFO 24408 --- [cloud-gateway] [main] o.s.c.g.r.RouteDefinitionRouteLocator : Loaded RoutePredicateFactory [My] */ @Component public class MyRoutePredicateFactory extends AbstractRoutePredicateFactory\u0026lt;MyRoutePredicateFactory.Config\u0026gt; { public MyRoutePredicateFactory() { super(MyRoutePredicateFactory.Config.class); } // 这个Config类就是路由断言规则！ @Validated public static class Config { @Setter @Getter @NotEmpty private String userType; // 钻/金/银用户等级 } /** * 使支持短格式 */ @Override public List\u0026lt;String\u0026gt; shortcutFieldOrder() { return Collections.singletonList(\u0026#34;userType\u0026#34;); } @Override public Predicate\u0026lt;ServerWebExchange\u0026gt; apply(MyRoutePredicateFactory.Config config) { return new Predicate\u0026lt;ServerWebExchange\u0026gt;() { @Override public boolean test(ServerWebExchange serverWebExchange) { String userType = serverWebExchange.getRequest().getQueryParams().getFirst(\u0026#34;userType\u0026#34;); // 获取名字为userType的查询参数 if (userType == null) return false; // 断言校验失败 if (userType.equalsIgnoreCase(config.getUserType())) { return true; // 与预先定义的userType相同，断言校验成功 } return false; } }; } } MyGlobalFilter：应用场景：统计Controller调用耗时情况，如何落地，谈谈设计思路：自定义全局过滤器（重点，面试设计题） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /** * 自定义全局过滤器 */ @Component @Slf4j public class MyGlobalFilter implements GlobalFilter, Ordered { public static final String BEGIN_VISIT_TIME = \u0026#34;begin_visit_time\u0026#34;; @Override public Mono\u0026lt;Void\u0026gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) { // 先记录下访问接口的开始时间 exchange.getAttributes().put(BEGIN_VISIT_TIME, System.currentTimeMillis()); // 返回统计的各个结果给后台 return chain.filter(exchange).then(Mono.fromRunnable(() -\u0026gt; { // 响应式编程 Long beginVisitTime = exchange.getAttribute(BEGIN_VISIT_TIME); if (beginVisitTime != null) { log.info(\u0026#34;访问接口主机：\u0026#34; + exchange.getRequest().getURI().getHost()); log.info(\u0026#34;访问接口端口：\u0026#34; + exchange.getRequest().getURI().getPort()); log.info(\u0026#34;访问接口URL：\u0026#34; + exchange.getRequest().getURI().getPath()); log.info(\u0026#34;访问接口URL后面的参数：\u0026#34; + exchange.getRequest().getURI().getRawQuery()); log.info(\u0026#34;访问接口时长：\u0026#34; + (System.currentTimeMillis() - beginVisitTime) + \u0026#34;毫秒\u0026#34;); log.info(\u0026#34;=====================================\u0026#34;); System.out.println(); /* 2024-12-10T21:53:21.721+08:00 INFO 29628 --- [cloud-gateway] [tor-http-nio-15] c.x.s.mygateway.MyGlobalFilter : 访问接口主机：localhost 2024-12-10T21:53:21.721+08:00 INFO 29628 --- [cloud-gateway] [tor-http-nio-15] c.x.s.mygateway.MyGlobalFilter : 访问接口端口：9527 2024-12-10T21:53:21.721+08:00 INFO 29628 --- [cloud-gateway] [tor-http-nio-15] c.x.s.mygateway.MyGlobalFilter : 访问接口URL：/pay/gateway/info 2024-12-10T21:53:21.721+08:00 INFO 29628 --- [cloud-gateway] [tor-http-nio-15] c.x.s.mygateway.MyGlobalFilter : 访问接口URL后面的参数：null 2024-12-10T21:53:21.721+08:00 INFO 29628 --- [cloud-gateway] [tor-http-nio-15] c.x.s.mygateway.MyGlobalFilter : 访问接口时长：198毫秒 */ } })); } /** * 数字越小，优先级越高，pre最先执行，post最后执行 */ @Override public int getOrder() { return 0; } } MyGatewayFilterFactory：自定义条件过滤器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 @Component public class MyGatewayFilterFactory extends AbstractGatewayFilterFactory\u0026lt;MyGatewayFilterFactory.Config\u0026gt; { public MyGatewayFilterFactory() { super(MyGatewayFilterFactory.Config.class); } public static class Config { @Getter @Setter private String status; // 设定一个状态值/标志位，等于时才可以访问 } @Override public List\u0026lt;String\u0026gt; shortcutFieldOrder() { return Arrays.asList(\u0026#34;status\u0026#34;); } @Override public GatewayFilter apply(MyGatewayFilterFactory.Config config) { return new GatewayFilter() { @Override public Mono\u0026lt;Void\u0026gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) { ServerHttpRequest request = exchange.getRequest(); System.out.println(\u0026#34;进入了自定义网关过滤器MyGatewayFilterFactory, status：\u0026#34; + config.getStatus()); // 进入了自定义网关过滤器MyGatewayFilterFactory, status：xz（与路由断言工厂类似，来自于yml中的配置） if (request.getQueryParams().containsKey(config.getStatus())) { // 包含配置的key才放行 return chain.filter(exchange); // 放行，传给下一个过滤器 } else { exchange.getResponse().setStatusCode(HttpStatus.BAD_REQUEST); // 非法请求 return exchange.getResponse().setComplete(); } } }; } } Spring Cloud原生 Consul：服务注册与发现 cmd指令 1 2 3 4 5 6 7 8 查看版本 consul --version 运行 consul agent -dev 打开 http://localhost:8500/ pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;!--SpringCloud consul discovery （所有微服务！） --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-consul-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringCloud consul config （仅service！） --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-consul-config\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-bootstrap\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; CAP 1 2 3 C：Consistency 强一致性 A：Availability 可用性 P：Partition tolerance 分区容错性 经典CAP图 1 2 3 4 5 6 最多只能同时较好的满足两个。CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求， 因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三大类： CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。 CP - 满足一致性，分区容忍性的系统，通常性能不是特别高。 AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。 AP架构：Eureka/Nacos 当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性。\n当数据出现不一致时，虽然A, B上的注册信息不完全相同，但每个Eureka节点依然能够正常对外提供服务，这会出现查询服务信息时如果请求A查不到，但请求B就能查到。如此保证了可用性但牺牲了一致性结论：违背了一致性C的要求，只满足可用性和分区容错，即AP\nCP架构：Zookeeper/Consul 当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性，Consul 遵循CAP原理中的CP原则，保证了强一致性和分区容错性，且使用的是Raft算法，比zookeeper使用的Paxos算法更加简单。虽然保证了强一致性，但是可用性就相应下降了，例如服务注册的时间会稍长一些，因为 Consul 的 raft 协议要求必须过半数的节点都写入成功才认为注册成功 ；在leader挂掉了之后，重新选举出leader之前会导致Consul 服务不可用。结论：违背了可用性A的要求，只满足一致性和分区容错，即CP\n三个注册中心异同点：Consul除了能够实现服务注册与发现，更能做到服务的动态配置与管理 持久化配置并注册为windows服务 1 2 3 4 5 6 7 8 9 // G:\\consul\\consul_start.bat @echo.服务启动...... @echo off @sc create Consul binpath= \u0026#34;G:\\consul\\consul.exe agent -server -ui -bind=127.0.0.1 -client=0.0.0.0 -bootstrap-expect 1 -data-dir G:\\consul\\mydata\u0026#34; @net start Consul @sc config Consul start= AUTO @echo.Consul start is OK......success @pause 以管理员身份运行！！！如果报错1073，需要以管理员身份先运行cmd，执行sc delete Consul，再用管理员身份运行此bat即可\n这样任务管理器后台就有了consul.exe\nLoadBalancer：负载均衡 本地客户端负载均衡：LoadBalancer与服务器端负载均衡：Nginx的区别（面试） 1 2 3 Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求，即负载均衡是由服务端实现的。 loadbalancer本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。 pom（consumer） 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!--SpringCloud consul discovery --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-consul-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--loadbalancer--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 负载均衡默认使用轮询算法 1 2 3 4 5 6 7 8 9 10 11 12 负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标，每次服务重启动后rest接口计数从1开始。 List\u0026lt;ServiceInstance\u0026gt; instances = discoveryClient.getInstances(\u0026#34;cloud-payment-service\u0026#34;); 如：List [0] instances = 127.0.0.1:8002 List [1] instances = 127.0.0.1:8001 8001+ 8002 组合成为集群，它们共计2台机器，集群总数为2， 按照轮询算法原理： 当总请求数为1时： 1 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001 当总请求数位2时： 2 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002 当总请求数位3时： 3 % 2 =1 对应下标位置为1 ，则获得服务地址为127.0.0.1:8001 当总请求数位4时： 4 % 2 =0 对应下标位置为0 ，则获得服务地址为127.0.0.1:8002 如此类推...... OpenFeign：服务接口调用和负载均衡（默认集成了LoadBalancer） 工作原理+特点 1 2 3 4 5 6 7 8 9 10 11 12 OpenFeign 是一个声明式的 Web 服务客户端，它可以帮助消费者（即客户端）以更简洁的方式调用微服务。OpenFeign 是基于 Java 的，特别是在 Spring Cloud 中被广泛使用，通常用于简化微服务之间的 HTTP 通信。 它的工作原理类似于中间件，允许通过接口声明来定义如何与其他服务进行交互，而不需要显式编写 HTTP 请求代码。OpenFeign 会根据在接口中定义的方法自动生成相应的 HTTP 请求，并通过注解（如 `@RequestMapping` 或 `@GetMapping`）来指定请求的细节。 OpenFeign 的特点包括： 1、声明式调用：只需要定义接口，OpenFeign 会自动处理 HTTP 请求和响应的细节。 2、集成 Spring Cloud：如果使用 Spring Cloud，OpenFeign 可以很容易地集成到你的微服务架构中，通过负载均衡、容错处理等功能与其他微服务交互。 3、自动化：OpenFeign 通过代理模式生成服务的实现类，因此你不需要手动编写 HTTP 请求处理逻辑。 4、注解驱动：通过注解（例如 @FeignClient、@RequestMapping 等），可以非常直观地配置请求和服务之间的映射关系。 总结： OpenFeign 作为一种中间件，简化了微服务客户端的开发工作，通过声明式的方式自动生成调用逻辑，可以使得微服务的通信变得更加便捷和高效。 OpenFeign与RestTemplate区别 1 2 3 4 5 6 7 8 9 10 11 12 13 使用 OpenFeign 不需要像 RestTemplate 那样手动指定微服务的 URL。OpenFeign 会自动处理微服务之间的通信，简化了 URL 的管理。 使用 RestTemplate 需要手动维护每个微服务的 URL 地址，尤其是在微服务规模较大的时候，可能会出现 URL 变更、服务发现等问题，增加了管理的复杂度。 使用 Feign 时，你只需要定义接口并使用注解来指定请求的路径和方法，不需要手动构造 URL。Feign 会通过服务名自动解析 URL，服务名会由 Spring Cloud 的服务发现机制（例如 Eureka 或 Consul）来解析。 优点： 简化配置：你不需要管理微服务的 URL，服务名通过注册中心自动解析。 负载均衡：与 Spring Cloud 的负载均衡机制集成，自动处理多实例选择。 服务发现：与 Spring Cloud 配合使用时，OpenFeign 会根据服务注册信息自动路由请求，而不需要硬编码 URL。 小结： OpenFeign 提供了更简洁、更灵活的方式来调用微服务，它通过服务名和注解的方式自动构造 HTTP 请求，避免了手动拼接 URL 和显式管理微服务地址的问题。 pom（consumer） 1 2 3 4 5 \u0026lt;!--openfeign--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-openfeign\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Resilience4j是Spring Cloud Circuit Breaker接口规范的实现类：CircuitBreaker+BulkHead+RateLimiter CircuitBreaker：断路器，服务熔断和服务降级（面试必考题） 1 2 1、微服务不可能只连一个数据库，如何处理微服务之间多个数据库之间分布式事务之间的调用，保障数据的一致性？ 2、微服务要做一些安全加固和高可用，有哪些兜底的方法来做服务的熔断和降级？ 配置参数 failure-rate-threshold 以百分比配置失败率峰值 sliding-window-type 断路器的滑动窗口期类型 可以基于“次数”（COUNT_BASED）或者“时间”（TIME_BASED）进行熔断，默认是COUNT_BASED。 sliding-window-size 若COUNT_BASED，则10次调用中有50%失败（即5次）打开熔断断路器；若为TIME_BASED则，此时还有额外的两个设置属性，含义为：在N秒内（sliding-window-size）100%（slow-call-rate-threshold）的请求超过N秒（slow-call-duration-threshold）打开断路器。 slowCallRateThreshold 以百分比的方式配置，断路器把调用时间大于slowCallDurationThreshold的调用视为慢调用，当慢调用比例大于等于峰值时，断路器开启，并进入服务降级。 slowCallDurationThreshold 配置调用时间的峰值，高于该峰值的视为慢调用。 permitted-number-of-calls-in-half-open-state 运行断路器在HALF_OPEN状态下时进行N次调用，如果故障或慢速调用仍然高于阈值，断路器再次进入打开状态。 minimum-number-of-calls 在每个滑动窗口期样本数，配置断路器计算错误率或者慢调用率的最小调用数。比如设置为5意味着，在计算故障率之前，必须至少调用5次。如果只记录了4次，即使4次都失败了，断路器也不会进入到打开状态。 wait-duration-in-open-state 从OPEN到HALF_OPEN状态需要等待的时间 pom（consumer） 1 2 3 4 5 6 7 8 9 10 \u0026lt;!--resilience4j-circuitbreaker--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-circuitbreaker-resilience4j\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 由于断路保护等需要AOP实现，所以必须导入AOP包 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-aop\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 断路器开启或关闭的条件 1 2 3 1、当到达一定的峰值和失败率后，断路器将会进入OPEN状态（保险丝熔断导致跳闸），服务熔断 2、当OPEN时，所有请求都不会调用主业务逻辑方法，而是直接走fallbackMethod兜底方法，服务降级 3、一段时间后，断路器会从OPEN进入HALF_OPEN，会放几个请求过去探探链路是否通，如果成功，断路器会进入CLOSE，恢复可以；如果失败，继续开启。重复上述... BulkHead：舱壁隔离，依赖隔离，负载保护 关注点+舱壁种类 1 2 3 主要关注并发执行的请求数量，限制对于下游服务的最大并发数量，侧重于某一个时刻的最大请求个数，防止资源耗尽导致的服务间连锁反应 SemaphoreBulkhead（信号量舱壁）、FixedThreadPoolBulkhead（固定线程池舱壁） RateLimiter：限流，侧重于一段时间内的最多请求次数 说说常见限流算法（面试） 漏桶算法（Leaky Bucket）\n令牌桶算法（Token Bucket，默认使用）\n熔断与隔离的理解与使用 1 2 3 4 5 熔断是用于避免特定服务器错误导致向该服务器的请求时间过长进一步导致长时间占用服务器的线程进而导致服务器线程池容易溢出再进而导致整个调用链服务雪崩的风险 隔离是避免服务器超负载运行导致宕机而做的一个保险，限制服务器能够处理特定请求的能力，不一口气吃成一个胖子，多出来的请求排队等待处理 看具体业务情况使用，可以单独使用，也可以配合起来使用 Micrometer Tracing：数据采样，前身Sleuth+ZipKin：链路展现=分布式链路追踪（Distributed Tracing） Zipkin cmd指令 1 2 3 4 5 运行 java -jar zipkin-server-3.4.3-exec.jar 打开 http://127.0.0.1:9411/ pom（service、consumer） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 \u0026lt;!-- 父工程 --\u0026gt; \u0026lt;micrometer-tracing.version\u0026gt;1.2.0\u0026lt;/micrometer-tracing.version\u0026gt; \u0026lt;micrometer-observation.version\u0026gt;1.12.0\u0026lt;/micrometer-observation.version\u0026gt; \u0026lt;feign-micrometer.version\u0026gt;12.5\u0026lt;/feign-micrometer.version\u0026gt; \u0026lt;zipkin-reporter-brave.version\u0026gt;2.17.0\u0026lt;/zipkin-reporter-brave.version\u0026gt; \u0026lt;!--micrometer-tracing-bom导入链路追踪版本中心 1--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing-bom\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${micrometer-tracing.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-tracing指标追踪 2--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${micrometer-tracing.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-tracing-bridge-brave适配zipkin的桥接包 3--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing-bridge-brave\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${micrometer-tracing.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-observation 4--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-observation\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${micrometer-observation.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--feign-micrometer 5--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.github.openfeign\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;feign-micrometer\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${feign-micrometer.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--zipkin-reporter-brave 6--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.zipkin.reporter2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;zipkin-reporter-brave\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${zipkin-reporter-brave.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 8001、80 \u0026lt;!--micrometer-tracing指标追踪 2--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-tracing-bridge-brave适配zipkin的桥接包 3--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-tracing-bridge-brave\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--micrometer-observation 4--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.micrometer\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;micrometer-observation\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--feign-micrometer 5--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.github.openfeign\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;feign-micrometer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--zipkin-reporter-brave 6--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.zipkin.reporter2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;zipkin-reporter-brave\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; yml 1 2 3 4 5 6 7 management: zipkin: tracing: endpoint: http://localhost:9411/api/v2/spans # 固定写法 tracing: sampling: probability: 1.0 # 采样率默认为0.1，即十次只能有一次被记录下，值越大收集越及时 GateWay：服务网关 GateWay与Nginx区别 1 2 3 Nginx更适用于通用的Web服务和反向代理，而Gateway更适用于微服务架构中的请求管理和集中控制 Nginx可以理解为是服务器之间的保护，Gateway是服务器内部的 GateWay与OpenFeign区别 1 2 3 4 5 6 7 Gateway主要是把外部的请求进行分发/外部调用微服务，OpenFeign用于微服务之间的调用 eg：OpenFeign是服务间调用，请求A服务，A服务需要B服务，此时使用OpenFeign，Gateway是在A之前，Nginx是在网关之前 请求过了Nginx直接就是访问网关，然后才是分发到各个微服务 现在是通过OpenFeign到Gateway，再由Gateway分发路由（Gateway也是一个微服务），但实际中是通过Nginx直接访问GateWay，再由GateWay分发，服务之间的调用再使用OpenFeign 三大概念：Route、Predicate、Filter 1 2 3 Route（路由）：构建网关的基本模块，由ID、目标URI，一系列的断言和过滤器组成，如果断言为true则匹配该路由 Predicate（断言）：开发人员可以匹配HTTP请求中的所有内容（例如请求头或请求参数），如果请求与断言相匹配则进行路由 Filter（过滤）：指Spring框架中的GatewayFilter实例，使用过滤器，可以在请求被路由之前或之后对请求进行修改 Filter：请求鉴权、异常处理、记录接口调用时长统计\u0026hellip; Filter与Predicate区别 1 2 Predicate：根据条件是否进行路由转发；Filter则是进入了路由，在请求到达接口之前和接口响应之后做一些操作 （过滤器可以替代断言，但是断言不能替代过滤器） pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;!--gateway--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-gateway\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--服务注册发现consul discovery,网关也要注册进服务注册中心统一管控--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-consul-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 指标监控健康检查的actuator,网关是响应式编程删除掉spring-boot-starter-web dependency--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 spring: application: name: cloud-gateway # 以微服务注册进consul或nacos服务列表内 cloud: consul: # 配置consul地址 host: localhost port: 8500 discovery: prefer-agent-address: true service-name: ${spring.application.name} gateway: # 所有的请求都会发给网关，由网关进行转发 routes: - id: pay_route1 # 路由的ID（类似于mysql的主键），没有固定规则但要求唯一，建议配合服务名 uri: http://localhost:8001 # 匹配后提供服务的路由地址，http://localhost:8001 -\u0026gt; http://localhost:9527 predicates: - Path=/pay/gateway/get/** # 断言，路径相匹配的进行路由 - id: pay_route2 uri: http://localhost:8001 predicates: - Path=/pay/gateway/info/** …………………………………………………………………… cloudalibaba-provider-payment9001（service）(Sentinel+OpenFeign) pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 \u0026lt;dependencies\u0026gt; \u0026lt;!--alibaba-sentinel--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-sentinel\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--nacos-discovery--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 引入自己定义的api通用包 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xz.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringBoot通用依赖模块--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--hutool--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--test--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; application.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 server: port: 9001 spring: application: name: nacos-payment-provider cloud: nacos: discovery: server-addr: localhost:8848 # 配置nacos的地址 sentinel: transport: dashboard: localhost:8080 # Sentinel dashboard控制台房屋地址（让8080端口的Sentinel将此服务器纳入流量管理） port: 8719 Main9001 1 2 3 4 5 6 @SpringBootApplication public class Main9001 { public static void main(String[] args) { SpringApplication.run(Main9001.class, args); } } controller.PayAlibabaController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 @RestController @RequestMapping(\u0026#34;/pay\u0026#34;) public class PayAlibabaController { @Value(\u0026#34;${server.port}\u0026#34;) private String serverPort; @GetMapping(\u0026#34;/nacos/{id}\u0026#34;) public String getPayInfo(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { return \u0026#34;nacos registry, serverPort：\u0026#34; + serverPort + \u0026#34;\\t id \u0026#34; + id; } @GetMapping(\u0026#34;/nacos/get/{orderNo}\u0026#34;) @SentinelResource(value = \u0026#34;getPayByOrderNo\u0026#34;, blockHandler = \u0026#34;handlerBlockHandler\u0026#34;) public ResultData getPayByOrderNo(@PathVariable(\u0026#34;orderNo\u0026#34;) String orderNo) { // 模拟从数据库查询出数据并赋值给DTO PayDTO payDTO = new PayDTO(); payDTO.setId(1024); payDTO.setOrderNo(orderNo); payDTO.setAmount(BigDecimal.valueOf(9.9)); payDTO.setPayNo(\u0026#34;pay:\u0026#34; + IdUtil.fastUUID()); payDTO.setUserId(1); return ResultData.success(\u0026#34;查询返回值：\u0026#34; + payDTO); } public ResultData handlerBlockHandler(@PathVariable(\u0026#34;orderNo\u0026#34;) String orderNo, BlockException exception) { return ResultData.fail(ReturnCodeEnum.RC500.getCode(), \u0026#34;getPayByOrderNo服务不可用，触发Sentinel流控配置规则\u0026#34;); } } cloudalibaba-consumer-order83（RestTemplate、OpenFeign） pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \u0026lt;dependencies\u0026gt; \u0026lt;!-- 引入自己定义的api通用包 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xz.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--openfeign--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-openfeign\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--alibaba-sentinel--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-sentinel\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--nacos-discovery--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--loadbalancer--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--web + actuator--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; application.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 server: port: 83 spring: application: name: nacos-order-consumer cloud: nacos: discovery: server-addr: localhost:8848 # 配置nacos的地址 # 消费者将要去访问的微服务名称（nacos微服务提供者叫什么就写什么） service-url: nacos-user-service: http://nacos-payment-provider # 激活Sentinel对Feign的支持 feign: sentinel: enabled: true Main83 1 2 3 4 5 6 7 @SpringBootApplication @EnableFeignClients public class Main83 { public static void main(String[] args) { SpringApplication.run(Main83.class, args); } } config.RestTemplate 1 2 3 4 5 6 7 8 @Configuration public class RestTemplateConfig { @Bean @LoadBalanced // 使RestTemplate具有负载均衡的能力 public RestTemplate restTemplate() { return new RestTemplate(); } } controller.OrderAlibabaController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 @RestController @RequestMapping(\u0026#34;/order\u0026#34;) public class OrderAlibabaController { @Resource private RestTemplate restTemplate; @Value(\u0026#34;${service-url.nacos-user-service}\u0026#34;) private String serverURL; @GetMapping(\u0026#34;/nacos/{id}\u0026#34;) public String paymentInfo(@PathVariable(\u0026#34;id\u0026#34;) Integer id) { String res = restTemplate.getForObject(serverURL + \u0026#34;/pay/nacos/\u0026#34; + id, String.class); return res + \u0026#34;\\t\u0026#34; + \u0026#34; 此乃OrderNacosController83调用者\u0026#34;; } // ============================================================================================ @Resource private PayFeignSentinelApi payFeignSentinelApi; @GetMapping(\u0026#34;/pay/nacos/get/{orderNo}\u0026#34;) public ResultData getPayByOrderNo(@PathVariable(\u0026#34;orderNo\u0026#34;) String orderNo) { return payFeignSentinelApi.getPayByOrderNo(orderNo); } } cloudalibaba-config-nacos-client3377（加载Nacos服务中心配置） pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \u0026lt;!-- 服务配置中心 --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;!--bootstrap--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-bootstrap\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--nacos-config--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-config\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--nacos-discovery--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--web + actuator--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; yml bootstrap：pom需要引入nacos-config、bootstrap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 服务配置中心Nacos配置 spring: application: name: nacos-config-client cloud: nacos: discovery: server-addr: localhost:8848 # Nacos服务注册中心地址 config: server-addr: localhost:8848 # Nacos作为配置中心地址 file-extension: yaml # 指定yaml格式的配置 group: PROD_GROUP namespace: a71156c4-a112-4cee-a7ed-a06773090e67 # Nacos端配置文件DataId命名规则： # ${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension} # 本案例写进Nacos配置管理-配置列表的DataId是：nacos-config-client-dev.yaml（应用名-环境.扩展名） application 1 2 3 4 5 6 7 server: port: 3377 spring: profiles: active: prod # 开发环境 # prod 生产环境 test 测试环境 Main3377 1 2 3 4 5 6 @SpringBootApplication public class Main3377 { public static void main(String[] args) { SpringApplication.run(Main3377.class, args); } } controller.NacosConfigClientController 1 2 3 4 5 6 7 8 9 10 11 12 13 @RestController @RefreshScope // 使当前类下的配置支持Nacos动态刷新功能 @RequestMapping(\u0026#34;/config\u0026#34;) public class NacosConfigClientController { @Value(\u0026#34;${config.info}\u0026#34;) // 从Nacos服务配置中心中的nacos-config-client-dev.yaml配置文件获取 private String configInfo; @GetMapping(\u0026#34;/info\u0026#34;) public String getConfigInfo() { return configInfo; // welcome to xz, nacos-config-client-dev.yaml, version=1 } } cloudalibaba-sentinel-service8401 pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 \u0026lt;dependencies\u0026gt; \u0026lt;!--SpringCloud alibaba sentinel --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-sentinel\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--nacos-discovery--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringCloud ailibaba sentinel-datasource-nacos --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.csp\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sentinel-datasource-nacos\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- 引入自己定义的api通用包 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xz.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringBoot通用依赖模块--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--hutool--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--test--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; application.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 server: port: 8401 spring: application: name: cloudalibaba-sentinel-service cloud: nacos: discovery: server-addr: localhost:8848 # 配置nacos的地址 sentinel: transport: dashboard: localhost:8080 # 配置sentinel dashboard控制台服务器地址 port: 8719 # 默认8719端口，假如被占用会自动从8719开始一次+1扫描，直到找到未被占用的端口为止（应用所在机器新开8719端口，与控制台8080进行交互） web-context-unify: false # controller的方法对service调用不认为是同一条链路（链路限流测试） datasource: ds1: nacos: server-addr: localhost:8848 data-id: ${spring.application.name} group-id: DEFAULT_GROUP data-type: json rule-type: flow Main8401 1 2 3 4 5 6 @SpringBootApplication public class Main8401 { public static void main(String[] args) { SpringApplication.run(Main8401.class,args); } } handler.MyRequestOriginParser 1 2 3 4 5 6 7 @Component public class MyRequestOriginParser implements RequestOriginParser { @Override public String parseOrigin(HttpServletRequest request) { return request.getParameter(\u0026#34;serverName\u0026#34;); } } service.FlowLimitService 1 2 3 4 5 6 7 8 @Service public class FlowLimitService { @SentinelResource(value = \u0026#34;common\u0026#34;) // sentinel中的资源名 public void common() { System.out.println(\u0026#34;---------------FlowLimitService come in\u0026#34;); } }Spring Cloud Alibaba controller FlowLimitController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 @RestController public class FlowLimitController { @GetMapping(\u0026#34;/testA\u0026#34;) public String testA() { return \u0026#34;-------testA-------\u0026#34;; } @GetMapping(\u0026#34;/testB\u0026#34;) public String testB() { return \u0026#34;-------testB-------\u0026#34;; } /** * 流控、链路演示： * C和D请求都访问flowLimitService.common()，阈值达到后对C限流，不管D */ @Resource private FlowLimitService flowLimitService; @GetMapping(\u0026#34;/testC\u0026#34;) public String testC() { flowLimitService.common(); return \u0026#34;-------testC-------\u0026#34;; } @GetMapping(\u0026#34;/testD\u0026#34;) public String testD() { flowLimitService.common(); return \u0026#34;-------testD-------\u0026#34;; } @GetMapping(\u0026#34;/testE\u0026#34;) public String testE() { System.out.println(System.currentTimeMillis() + \u0026#34; testE，排队等待\u0026#34;); return \u0026#34;-------testE-------\u0026#34;; } @GetMapping(\u0026#34;/testF\u0026#34;) public String testF() { try { TimeUnit.SECONDS.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(System.currentTimeMillis() + \u0026#34; testF，熔断规则—慢调用比例\u0026#34;); return \u0026#34;-------testF-------\u0026#34;; } @GetMapping(\u0026#34;/testG\u0026#34;) public String testG() { int age = 10 / 0; System.out.println(System.currentTimeMillis() + \u0026#34; testG，熔断规则—异常比例\u0026#34;); // 如果GlobalExceptionHandler全局异常存在，会被捕获处理成返回，不算接口返回异常（不会触发异常比例熔断） return \u0026#34;-------testG-------\u0026#34;; } @GetMapping(\u0026#34;/testH\u0026#34;) public String testH() { int age = 10 / 0; System.out.println(System.currentTimeMillis() + \u0026#34; testH，熔断规则—异常数\u0026#34;); return \u0026#34;-------testH-------\u0026#34;; } } RateLimitController 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @RestController @Slf4j public class RateLimitController { @GetMapping(\u0026#34;/rateLimit/byUrl\u0026#34;) public String byUrl() { return \u0026#34;按rest地址限流测试\u0026#34;; } @GetMapping(\u0026#34;/rateLimit/byResource\u0026#34;) @SentinelResource(value = \u0026#34;byResourceSentinelResource\u0026#34;, blockHandler = \u0026#34;handlerBlockHandler\u0026#34;) public String byResource() { return \u0026#34;按资源名称限流测试\u0026#34;; } public String handlerBlockHandler(BlockException blockException) { // 返回值类型要与原方法保持一致 return \u0026#34;服务不可用，触发了@SentinelResource\u0026#34;; } @GetMapping(\u0026#34;/rateLimit/doAction/{p1}\u0026#34;) @SentinelResource(value = \u0026#34;doActionSentinelResource\u0026#34;, blockHandler = \u0026#34;doActionBlockHandler\u0026#34;, fallback = \u0026#34;doActionFallback\u0026#34;) public String doAction(@PathVariable(\u0026#34;p1\u0026#34;) Integer p1) { if (p1 == 0) { throw new RuntimeException(\u0026#34;p1等于0直接异常\u0026#34;); } return \u0026#34;doAction\u0026#34;; } public String doActionBlockHandler(@PathVariable(\u0026#34;p1\u0026#34;) Integer p1, BlockException blockException) { // 参数要在doAction的参数基础上继续添加 log.error(\u0026#34;sentinel配置自定义限流了:{}\u0026#34;, blockException); return \u0026#34;sentinel配置自定义限流了\u0026#34;; } public String doActionFallback(@PathVariable(\u0026#34;p1\u0026#34;) Integer p1, Throwable e) { // 参数要在doAction的参数基础上继续添加 log.error(\u0026#34;程序逻辑异常了：{}\u0026#34;, e); return \u0026#34;程序逻辑异常了\u0026#34;; } /** * 热点参数限流 */ @GetMapping(\u0026#34;/testHotKey\u0026#34;) @SentinelResource(value = \u0026#34;testHotKey\u0026#34;, blockHandler = \u0026#34;dealHandler_testHotKey\u0026#34;) public String testHotKey(@RequestParam(value = \u0026#34;p1\u0026#34;, required = false) String p1, @RequestParam(value = \u0026#34;p2\u0026#34;, required = false) String p2) { return \u0026#34;-----------testHotKey\u0026#34;; } public String dealHandler_testHotKey(String p1, String p2, BlockException exception) { return \u0026#34;-----------dealHandler_testHotKey\u0026#34;; } } EmpowerController 1 2 3 4 5 6 7 8 9 10 @RestController @Slf4j public class EmpowerController { @GetMapping(\u0026#34;/empower\u0026#34;) public String requestSentinel() { log.info(\u0026#34;测试授权规则\u0026#34;); return \u0026#34;测试授权规则\u0026#34;; } } cloudalibaba-sentinel-gateway9528（Sentinel+Gateway） pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;dependencies\u0026gt; \u0026lt;!--gateway--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-gateway\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.csp\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sentinel-transport-simple-http\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.8.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.csp\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sentinel-spring-cloud-gateway-adapter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.8.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.annotation\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.annotation-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.3.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; application.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 server: port: 9528 spring: application: name: cloudalibaba-sentinel-gateway cloud: nacos: discovery: server-addr: localhost:8848 gateway: routes: - id: pay_route1 uri: http://localhost:9001 # 若要使用动态路由lb://XXX，网关需要引入loadbalancer predicates: - Path=/pay/** Main 1 2 3 4 5 6 @SpringBootApplication public class Main { public static void main(String[] args) { SpringApplication.run(Main.class, args); } } config.GatewayConfiguration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 /** * Sentinel提供Spring Cloud Gateway的适配模块，可以提供两种资源维度的限流 * （1）route维度：即在Spring配置文件中配置路由条目，资源名为对应的route Id * （2）自定义API维度：用户可以用Sentinel提供的API来自定义一些API分组 */ @Configuration public class GatewayConfiguration { private final List\u0026lt;ViewResolver\u0026gt; viewResolvers; private final ServerCodecConfigurer serverCodecConfigurer; public GatewayConfiguration(ObjectProvider\u0026lt;List\u0026lt;ViewResolver\u0026gt;\u0026gt; viewResolversProvider, ServerCodecConfigurer serverCodecConfigurer) { this.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList); // 视图 this.serverCodecConfigurer = serverCodecConfigurer; // 编码器 } @Bean @Order(Ordered.HIGHEST_PRECEDENCE) public SentinelGatewayBlockExceptionHandler sentinelGatewayBlockExceptionHandler() { // Register the block exception handler for Spring Cloud Gateway return new SentinelGatewayBlockExceptionHandler(viewResolvers, serverCodecConfigurer); } @Bean @Order(-1) // 最先加载，把Sentinel的处理逻辑作为Gateway的第一个过滤器来使用 public GlobalFilter sentinelGatewayFilter() { return new SentinelGatewayFilter(); } @PostConstruct // 标记一个方法，该方法将在类的实例化和依赖注入（例如使用 Spring 框架时）完成之后自动执行。换句话说，@PostConstruct 注解的方法会在对象的所有依赖被注入之后执行，但在该对象的任何其他方法被调用之前。 // 用于进行一些初始化操作，例如资源加载、配置校验或初始化外部服务等。 // 要求：注解的方法不能有参数、该方法必须是 void 类型 public void doInit() { initBlockHandler(); } /** * 处理+自定义返回的例外信息内容，类似于触发了流控规则保护 */ private void initBlockHandler() { Set\u0026lt;GatewayFlowRule\u0026gt; rules = new HashSet\u0026lt;\u0026gt;(); // 网关流量规则集合 rules.add(new GatewayFlowRule(\u0026#34;pay_route1\u0026#34;).setCount(2).setIntervalSec(1)); // 添加限流规则：1s内访问阈值为2 GatewayRuleManager.loadRules(rules); // 添加至网关规则管理器 BlockRequestHandler handler = new BlockRequestHandler() { @Override public Mono\u0026lt;ServerResponse\u0026gt; handleRequest(ServerWebExchange serverWebExchange, Throwable throwable) { Map\u0026lt;String, String\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;errorCode\u0026#34;, HttpStatus.TOO_MANY_REQUESTS.getReasonPhrase()); map.put(\u0026#34;errorMessage\u0026#34;, \u0026#34;请求太过频繁，系统忙不过来，触发限流...\u0026#34;); return ServerResponse.status(HttpStatus.TOO_MANY_REQUESTS) .contentType(MediaType.APPLICATION_JSON) .body(BodyInserters.fromValue(map)); // 设置HTTP返回的消息 } }; GatewayCallbackManager.setBlockHandler(handler); } } seata-order-service2001 pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 \u0026lt;dependencies\u0026gt; \u0026lt;!-- nacos --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--alibaba-seata--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-seata\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--openfeign--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-openfeign\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--loadbalancer--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--cloud-api-commons--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.xz.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;cloud-api-commons\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--web + actuator--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--SpringBoot集成druid连接池--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;druid-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- Swagger3 调用方式 http://你的主机IP地址:5555/swagger-ui/index.html --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springdoc\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springdoc-openapi-starter-webmvc-ui\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--mybatis和springboot整合--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.spring.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-spring-boot-starter\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--Mysql数据库驱动8 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--persistence--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.persistence\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;persistence-api\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--通用Mapper4--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;tk.mybatis\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mapper\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--hutool--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;cn.hutool\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;hutool-all\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!-- fastjson2 --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.fastjson2\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson2\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--lombok--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--test--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; application.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 server: port: 2001 spring: application: name: seata-order-service cloud: nacos: discovery: server-addr: localhost:8848 #Nacos服务注册中心地址 # ==========applicationName + druid-mysql8 driver=================== datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/seata_order?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;serverTimezone=GMT%2B8\u0026amp;rewriteBatchedStatements=true\u0026amp;allowPublicKeyRetrieval=true username: root password: 527644117 # ========================mybatis=================== mybatis: mapper-locations: classpath:mapper/*.xml # 扫描resource下的接口xml具体实现 type-aliases-package: com.xz.cloud.entities configuration: map-underscore-to-camel-case: true # ========================seata=================== seata: registry: type: nacos nacos: server-addr: 127.0.0.1:8848 namespace: \u0026#34;\u0026#34; # 不写默认public group: SEATA_GROUP application: seata-server # 就相当于Data Id tx-service-group: default_tx_group # 事务组，由它获得TC服务的集群名称 service: vgroup-mapping: # 点击源码分析 default_tx_group: default # 事务组与TC服务集群的映射关系 data-source-proxy-mode: AT logging: level: io: seata: info # seata的日志级别 SeataOrderMainApp2001 1 2 3 4 5 6 7 8 @SpringBootApplication @MapperScan(\u0026#34;/com.xz.springcloud.mapper\u0026#34;) @EnableFeignClients public class SeataOrderMainApp2001 { public static void main(String[] args) { SpringApplication.run(SeataOrderMainApp2001.class, args); } } entities.Order 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 /** * 表名：t_order */ @Table(name = \u0026#34;t_order\u0026#34;) @ToString public class Order implements Serializable { @Id @GeneratedValue(generator = \u0026#34;JDBC\u0026#34;) private Long id; /** * 用户id */ @Column(name = \u0026#34;user_id\u0026#34;) private Long userId; /** * 产品id */ @Column(name = \u0026#34;product_id\u0026#34;) private Long productId; /** * 数量 */ private Integer count; /** * 金额 */ private Long money; /** * 订单状态: 0:创建中; 1:已完结 */ private Integer status; /** * @return id */ public Long getId() { return id; } /** * @param id */ public void setId(Long id) { this.id = id; } /** * 获取用户id * * @return userId - 用户id */ public Long getUserId() { return userId; } /** * 设置用户id * * @param userId 用户id */ public void setUserId(Long userId) { this.userId = userId; } /** * 获取产品id * * @return productId - 产品id */ public Long getProductId() { return productId; } /** * 设置产品id * * @param productId 产品id */ public void setProductId(Long productId) { this.productId = productId; } /** * 获取数量 * * @return count - 数量 */ public Integer getCount() { return count; } /** * 设置数量 * * @param count 数量 */ public void setCount(Integer count) { this.count = count; } /** * 获取金额 * * @return money - 金额 */ public Long getMoney() { return money; } /** * 设置金额 * * @param money 金额 */ public void setMoney(Long money) { this.money = money; } /** * 获取订单状态: 0:创建中; 1:已完结 * * @return status - 订单状态: 0:创建中; 1:已完结 */ public Integer getStatus() { return status; } /** * 设置订单状态: 0:创建中; 1:已完结 * * @param status 订单状态: 0:创建中; 1:已完结 */ public void setStatus(Integer status) { this.status = status; } } mapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public interface OrderMapper extends Mapper\u0026lt;Order\u0026gt; { } \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026#34;-//mybatis.org//DTD Mapper 3.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026#34;\u0026gt; \u0026lt;mapper namespace=\u0026#34;com.xz.springcloud.mapper.OrderMapper\u0026#34;\u0026gt; \u0026lt;resultMap id=\u0026#34;BaseResultMap\u0026#34; type=\u0026#34;com.xz.springcloud.entities.Order\u0026#34;\u0026gt; \u0026lt;!-- WARNING - @mbg.generated --\u0026gt; \u0026lt;id column=\u0026#34;id\u0026#34; jdbcType=\u0026#34;BIGINT\u0026#34; property=\u0026#34;id\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;user_id\u0026#34; jdbcType=\u0026#34;BIGINT\u0026#34; property=\u0026#34;userId\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;product_id\u0026#34; jdbcType=\u0026#34;BIGINT\u0026#34; property=\u0026#34;productId\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;count\u0026#34; jdbcType=\u0026#34;INTEGER\u0026#34; property=\u0026#34;count\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;money\u0026#34; jdbcType=\u0026#34;DECIMAL\u0026#34; property=\u0026#34;money\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;status\u0026#34; jdbcType=\u0026#34;INTEGER\u0026#34; property=\u0026#34;status\u0026#34; /\u0026gt; \u0026lt;/resultMap\u0026gt; \u0026lt;/mapper\u0026gt; service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 public interface OrderService { /** * 创建订单 * @param order */ void create(Order order); } @Service @Slf4j public class OrderServiceImpl implements OrderService { @Resource private OrderMapper orderMapper; @Resource private StorageFeignApi storageFeignApi; // 库存微服务 @Resource private AccountFeignAPi accountFeignAPi; // 账户微服务 @Override @GlobalTransactional(name = \u0026#34;zzyy-create-order\u0026#34;, rollbackFor = Exception.class) // AT public void create(Order order) { // 全局事务ID的检查，重要！ String xid = RootContext.getXID(); // 1、新建订单 log.info(\u0026#34;------------ 开始新建订单：\u0026#34; + \u0026#34;\\t\u0026#34; + \u0026#34;xid：\u0026#34; + xid); // 订单新建时默认初始订单状态是0，创建中 order.setStatus(0); int res = orderMapper.insertSelective(order); // 插入订单成功后获得插入mysql的实体对象 Order orderFromDB = null; if (res \u0026gt; 0) { // 从mySQL查出刚插入的记录 orderFromDB = orderMapper.selectOne(order); log.info(\u0026#34;---\u0026gt; 新建订单成功，orderFromDB info：\u0026#34; + orderFromDB); System.out.println(); // 2、扣减库存 log.info(\u0026#34;---\u0026gt; 订单微服务开始调用Storage库存，做扣减count\u0026#34;); storageFeignApi.decrease(orderFromDB.getProductId(), orderFromDB.getCount()); log.info(\u0026#34;---\u0026gt; 订单微服务结束调用Storage库存，做扣减完成\u0026#34;); // 3、扣减账户余额 log.info(\u0026#34;---\u0026gt; 订单微服务开始调用Account库存，做扣减money\u0026#34;); accountFeignAPi.decrease(orderFromDB.getUserId(), order.getMoney()); log.info(\u0026#34;---\u0026gt; 订单微服务结束调用Account库存，做扣减完成\u0026#34;); // 4、修改订单状态为已完结再更新 log.info(\u0026#34;---\u0026gt; 修改订单状态\u0026#34;); orderFromDB.setStatus(1); Example whereCondition = new Example(Order.class); Example.Criteria criteria = whereCondition.createCriteria(); criteria.andEqualTo(\u0026#34;userId\u0026#34;, orderFromDB.getUserId()); criteria.andEqualTo(\u0026#34;status\u0026#34;, 0); int updateResult = orderMapper.updateByExampleSelective(orderFromDB, whereCondition); log.info(\u0026#34;---\u0026gt; 修改订单状态完成\u0026#34; + \u0026#34;\\t\u0026#34; + updateResult); log.info(\u0026#34;---\u0026gt; orderFromDB info：\u0026#34; + orderFromDB); } System.out.println(); log.info(\u0026#34;------------ 结束新建订单：\u0026#34; + \u0026#34;\\t\u0026#34; + \u0026#34;xid：\u0026#34; + xid); } } controller.OrderController 1 2 3 4 5 6 7 8 9 10 11 12 @RestController public class OrderController { @Resource private OrderService orderService; @GetMapping(\u0026#34;/order/create\u0026#34;) public ResultData create(Order order) { orderService.create(order); return ResultData.success(order); } } seata-storage-service2002 pom（同2001） application.yml（修改server.port、spring.application.name、spring.datasource.url） SeataStorageMainApp2002 1 2 3 4 5 6 7 8 @SpringBootApplication @MapperScan(\u0026#34;com.xz.springcloud.mapper\u0026#34;) @EnableFeignClients public class SeataStorageMainApp2002 { public static void main(String[] args) { SpringApplication.run(SeataStorageMainApp2002.class, args); } } entities.Storage 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 /** * 表名：t_storage */ @Table(name = \u0026#34;t_storage\u0026#34;) @ToString public class Storage implements Serializable { @Id @GeneratedValue(generator = \u0026#34;JDBC\u0026#34;) private Long id; /** * 产品id */ @Column(name = \u0026#34;product_id\u0026#34;) private Long productId; /** * 总库存 */ private Integer total; /** * 已用库存 */ private Integer used; /** * 剩余库存 */ private Integer residue; /** * @return id */ public Long getId() { return id; } /** * @param id */ public void setId(Long id) { this.id = id; } /** * 获取产品id * * @return productId - 产品id */ public Long getProductId() { return productId; } /** * 设置产品id * * @param productId 产品id */ public void setProductId(Long productId) { this.productId = productId; } /** * 获取总库存 * * @return total - 总库存 */ public Integer getTotal() { return total; } /** * 设置总库存 * * @param total 总库存 */ public void setTotal(Integer total) { this.total = total; } /** * 获取已用库存 * * @return used - 已用库存 */ public Integer getUsed() { return used; } /** * 设置已用库存 * * @param used 已用库存 */ public void setUsed(Integer used) { this.used = used; } /** * 获取剩余库存 * * @return residue - 剩余库存 */ public Integer getResidue() { return residue; } /** * 设置剩余库存 * * @param residue 剩余库存 */ public void setResidue(Integer residue) { this.residue = residue; } } mapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public interface StorageMapper extends Mapper\u0026lt;Storage\u0026gt; { /** * 扣减库存 * @param productId * @param count */ void decrease(@Param(\u0026#34;productId\u0026#34;) Long productId, @Param(\u0026#34;count\u0026#34;) Integer count); } \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026#34;-//mybatis.org//DTD Mapper 3.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026#34;\u0026gt; \u0026lt;mapper namespace=\u0026#34;com.xz.springcloud.mapper.StorageMapper\u0026#34;\u0026gt; \u0026lt;resultMap id=\u0026#34;BaseResultMap\u0026#34; type=\u0026#34;com.xz.springcloud.entities.Storage\u0026#34;\u0026gt; \u0026lt;!-- WARNING - @mbg.generated --\u0026gt; \u0026lt;id column=\u0026#34;id\u0026#34; jdbcType=\u0026#34;BIGINT\u0026#34; property=\u0026#34;id\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;product_id\u0026#34; jdbcType=\u0026#34;BIGINT\u0026#34; property=\u0026#34;productId\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;total\u0026#34; jdbcType=\u0026#34;INTEGER\u0026#34; property=\u0026#34;total\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;used\u0026#34; jdbcType=\u0026#34;INTEGER\u0026#34; property=\u0026#34;used\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;residue\u0026#34; jdbcType=\u0026#34;INTEGER\u0026#34; property=\u0026#34;residue\u0026#34; /\u0026gt; \u0026lt;/resultMap\u0026gt; \u0026lt;!-- void decrease(@Param(\u0026#34;productId\u0026#34;) Long productId, @Param(\u0026#34;count\u0026#34;) Integer count); --\u0026gt; \u0026lt;update id=\u0026#34;decrease\u0026#34;\u0026gt; update t_storage set used=used+#{count}, residue=residue-#{count} where product_id=#{productId} \u0026lt;/update\u0026gt; \u0026lt;/mapper\u0026gt; service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public interface StorageService { /** * 扣减库存 * @param productId * @param count */ void decrease(Long productId,Integer count); } @Service @Slf4j public class StorageServiceImpl implements StorageService { @Resource private StorageMapper storageMapper; @Override public void decrease(Long productId, Integer count) { log.info(\u0026#34;----\u0026gt; storage-service中扣减库存开始\u0026#34;); storageMapper.decrease(productId, count); log.info(\u0026#34;----\u0026gt; storage-service中扣减库存结束\u0026#34;); } } controller.StorageController 1 2 3 4 5 6 7 8 9 10 11 12 @RestController public class StorageController { @Resource private StorageService storageService; @GetMapping(\u0026#34;/storage/decrease\u0026#34;) public ResultData decrease(@RequestParam(\u0026#34;productId\u0026#34;) Long productId, @RequestParam(\u0026#34;count\u0026#34;) Integer count) { storageService.decrease(productId, count); return ResultData.success(\u0026#34;扣减库存成功\u0026#34;); } } seata-account-service2003 pom（同2001） application.yml（修改server.port、spring.application.name、spring.datasource.url） SeataStorageMainApp2003 1 2 3 4 5 6 7 8 @SpringBootApplication @MapperScan(\u0026#34;com.xz.springcloud.mapper\u0026#34;) @EnableFeignClients public class SeataAccountMainApp2003 { public static void main(String[] args) { SpringApplication.run(SeataAccountMainApp2003.class, args); } } entities.Storage 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 /** * 表名：t_account */ @Table(name = \u0026#34;t_account\u0026#34;) @ToString public class Account implements Serializable { /** * id */ @Id @GeneratedValue(generator = \u0026#34;JDBC\u0026#34;) private Long id; /** * 用户id */ @Column(name = \u0026#34;user_id\u0026#34;) private Long userId; /** * 总额度 */ private Long total; /** * 已用账户余额 */ private Long used; /** * 剩余可用额度 */ private Long residue; /** * 获取id * * @return id - id */ public Long getId() { return id; } /** * 设置id * * @param id id */ public void setId(Long id) { this.id = id; } /** * 获取用户id * * @return userId - 用户id */ public Long getUserId() { return userId; } /** * 设置用户id * * @param userId 用户id */ public void setUserId(Long userId) { this.userId = userId; } /** * 获取总额度 * * @return total - 总额度 */ public Long getTotal() { return total; } /** * 设置总额度 * * @param total 总额度 */ public void setTotal(Long total) { this.total = total; } /** * 获取已用账户余额 * * @return used - 已用账户余额 */ public Long getUsed() { return used; } /** * 设置已用账户余额 * * @param used 已用账户余额 */ public void setUsed(Long used) { this.used = used; } /** * 获取剩余可用额度 * * @return residue - 剩余可用额度 */ public Long getResidue() { return residue; } /** * 设置剩余可用额度 * * @param residue 剩余可用额度 */ public void setResidue(Long residue) { this.residue = residue; } } mapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public interface AccountMapper extends Mapper\u0026lt;Account\u0026gt; { void decrease(@Param(\u0026#34;userId\u0026#34;) Long userId, @Param(\u0026#34;money\u0026#34;) Long money); } \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE mapper PUBLIC \u0026#34;-//mybatis.org//DTD Mapper 3.0//EN\u0026#34; \u0026#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd\u0026#34;\u0026gt; \u0026lt;mapper namespace=\u0026#34;com.xz.springcloud.mapper.AccountMapper\u0026#34;\u0026gt; \u0026lt;resultMap id=\u0026#34;BaseResultMap\u0026#34; type=\u0026#34;com.xz.springcloud.entities.Account\u0026#34;\u0026gt; \u0026lt;!-- WARNING - @mbg.generated --\u0026gt; \u0026lt;id column=\u0026#34;id\u0026#34; jdbcType=\u0026#34;BIGINT\u0026#34; property=\u0026#34;id\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;user_id\u0026#34; jdbcType=\u0026#34;BIGINT\u0026#34; property=\u0026#34;userId\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;total\u0026#34; jdbcType=\u0026#34;DECIMAL\u0026#34; property=\u0026#34;total\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;used\u0026#34; jdbcType=\u0026#34;DECIMAL\u0026#34; property=\u0026#34;used\u0026#34; /\u0026gt; \u0026lt;result column=\u0026#34;residue\u0026#34; jdbcType=\u0026#34;DECIMAL\u0026#34; property=\u0026#34;residue\u0026#34; /\u0026gt; \u0026lt;/resultMap\u0026gt; \u0026lt;!-- void decrease(@Param(\u0026#34;userId\u0026#34;)Long userId,@Param(\u0026#34;money\u0026#34;)Long money); --\u0026gt; \u0026lt;update id=\u0026#34;decrease\u0026#34;\u0026gt; update t_account set used=used+#{money}, residue=residue-#{money} where user_id=#{userId} \u0026lt;/update\u0026gt; \u0026lt;/mapper\u0026gt; service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public interface AccountService { void decrease(Long userId, Long money); } @Service @Slf4j public class AccountServiceImpl implements AccountService { @Resource private AccountMapper accountMapper; /** * 扣减账户余额 * * @param userId * @param money */ @Override public void decrease(Long userId, Long money) { log.info(\u0026#34;----\u0026gt; account-service中扣减账户余额开始\u0026#34;); accountMapper.decrease(userId, money); myTimeOut(); // int age = 10 / 0; log.info(\u0026#34;----\u0026gt; account-service中扣减账户余额结束\u0026#34;); } /** * 模拟超时异常，全局回滚事务 */ private static void myTimeOut() { try { TimeUnit.SECONDS.sleep(65); } catch (Exception e) { e.printStackTrace(); } } } controller.AccountController 1 2 3 4 5 6 7 8 9 10 11 12 @RestController public class AccountController { @Resource private AccountService accountService; @GetMapping(\u0026#34;/account/decrease\u0026#34;) public ResultData decrease(@RequestParam(\u0026#34;userId\u0026#34;) Long userId, @RequestParam(\u0026#34;money\u0026#34;) Long money) { accountService.decrease(userId, money); return ResultData.success(\u0026#34;扣减账户余额成功！\u0026#34;); } } Spring Cloud Alibaba Nacos：服务注册与发现 = Spring Cloud Consul 四个注册中心异同点 cmd指令 1 2 3 4 5 运行 startup.cmd -m standalone 打开 http://localhost:8848/nacos pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;!--nacos-discovery （所有微服务！） --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-discovery\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--loadbalancer （仅consumer！） --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-loadbalancer\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--bootstrap （仅服务配置中心！）--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-bootstrap\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;!--nacos-config--\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-nacos-config\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 在9001的基础上直接拷贝配置运行9002（Nacos同样支持负载均衡） 服务配置中心 1 2 3 4 5 6 7 8 Nacos本身就是持久化的，故不需要像Consul那样进行持久化配置 Nacos的数据会持久化到内嵌数据库derby中，可以自行配置持久化到MySQL中 Nacos同Consul一样，在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动，为了满足动态刷新和全局广播通知 springboot中配置文件的加载是存在优先级顺序的，bootstrap优先级高于application Nacos严格区分yml与yaml 修改nacos-config-client-dev.yaml，即可动态刷新获取到最新发布的yaml配置信息 实际问题 1 2 3 4 5 6 7 8 9 10 11 问题1： 实际开发中，通常一个系统会准备 dev开发环境 test测试环境 prod生产环境 如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢？ 问题2： 一个大型分布式微服务系统会有很多微服务子项目， 每个微服务项目又都会有相应的开发环境、测试环境、预发环境、正式环境...... 那怎么对这些微服务配置进行分组和命名空间管理呢？ 三种方案加载不同环境下的服务中心yaml配置信息 Data ID 1 默认空间public+默认分组DEFAULT_GROUP+新建Data ID 修改spring.profiles.active加载相应的配置 Group 1 默认空间public+新建分组PROD_GROUP+新建Data ID 修改spring.profiles.active、spring.cloud.nacos.config.group加载相应的配置 Namespace 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 新建命名空间Prod_Namespace（命名空间ID同为Prod_Namespace）+新建分组PROD_GROUP+新建Data ID 新建命名空间Prod2_Namespace（命名空间ID不填，自动生成）+新建分组PROD_GROUP+新建Data ID 修改spring.profiles.active、spring.cloud.nacos.config.group、spring.cloud.nacos.config.namespace（注意是namespace的ID而不是名字）加载相应的配置 eg: Nacos: 命名空间：a71156c4-a112-4cee-a7ed-a06773090e67 Group：PROD_GROUP Data ID：nacos-config-client-prod.yaml bootstrap: group: PROD_GROUP namespace: a71156c4-a112-4cee-a7ed-a06773090e67 application： spring: profiles: active: prod # 开发环境 Sentinel：从流量路由、流量控制、流量整形、熔断降级、系统自适应过载保护、热点流量防护等多个维度帮助开发者保障微服务的稳定性 流控降级和容错标准 1 2 3 4 5 Target：针对怎样的流量：按名称划分/按HTTP请求划分，比如针对包含某个特定header的请求/按流量流向（IN/OUT）划分 Strategy：对应怎样的流量治理策略：流量控制/流量平滑/并发请求控制/熔断器/自适应过载保护 FallbackAction：触发后的fallback行为：HTTP请求返回特定的状态码和header、body信息/RPC请求返回特定的返回值或异常/流量调度至其他节点 讲讲什么是缓存穿透？击穿？雪崩？如何解决？（见redis7） 服务雪崩/降级/熔断/限流/隔离/超时 1 2 3 4 5 6 7 8 9 10 11 服务雪崩：一个微小的服务没有做限流以后导致调用和交互出现拖垮全局的情况 服务降级：服务兜底方案，如果服务无法完成正常的调用流程，就用默认的兜底方案来返回数据（比如当商品详情页系统出现故障无法调用时，会直接获取缓存中的商品介绍信息返回给前端页面） 服务熔断：如果下游服务因为访问压力过大导致响应很慢或者一直调用失败，上游服务为了保证系统的整体可用性，会暂时断开与下游服务的调用连接 服务限流：限制进入系统的流量，防止流量过大压垮系统，主要为了保护节点或者集群后面的数据节点。防止瞬时流量过大使服务和数据崩溃；还可用于平滑请求，防止类似秒杀高并发等操作，排队一分钟N个有序进行 服务隔离：按一定规则将系统划分多个模块，且各模块之间相互独立，不会存在强依赖关系。如果拆分后的某个服务发生故障，能够将故障产生的影响限制在某个具体服务内，不会向其他服务扩散，也就不会对整体服务产生致命影响（线程池/信号量） 服务超时：上游给下游设置一个最大响应时间，如果超过还未能返回结果，则断开上游与下游之间的请求连接，释放资源 cmd指令 1 2 3 4 5 6 7 运行 java -jar sentinel-dashboard-1.8.8.jar 打开 http://localhost:8080 用户名、密码均为：sentinel pom 1 2 3 4 5 \u0026lt;!--SpringCloud alibaba sentinel --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-alibaba-sentinel\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 流控规则—阈值类型—QPS 流控模式 直接、单机阈值：超过阈值就限流 关联：当与A关联的资源B达到阈值后，就限流A自己（B惹事，A挂了，防止下游系统出事影响到上游系统） 使用JMeter压力测试：1s20个请求 链路：来自不同链路的请求对同一目标访问时，实时针对性的不同限流措施，比如C请求超过阈值就限流，D请求没事（看人下菜） 流控效果 直接失败：Blocked by Sentinel (flow limiting) Warm Up：预热时长内为单机阈值/3，预热时长后逐步增长到单机阈值（比如秒杀系统开启的瞬间会有很多流量上来，很可能会把系统打死，预热方式就能保护系统，慢慢地把阈值增长到设置的阈值，慢慢地把流量放进来） 排队等待：削峰填谷（1s通过单机阈值个请求，超过设定的超时时间的请求作为超时处理，放弃）（与Warm Up的区别在于，Warm Up在预热期间会将超过1/3阈值的请求直接拒绝，而排队等待是不希望拒绝，而是继续处理） 使用JMeter压力测试：1s20个请求 流控规则—阈值类型—并发线程数 使用JMeter压力测试：1s100个请求、循环 熔断规则 慢调用比例：1s内，至少收集5个请求，在这些请求中，超过200ms的比例超过0.1，就熔断5s 使用JMeter压力测试：1s10个请求、循环 异常比例：1s内，至少收集5个请求，在这些请求中，出现异常的比例超过0.2，就熔断5s 使用JMeter压力测试：1s20个请求、循环 异常数：1s内，至少收集5个请求，在这些请求中，出现异常数量超过1，就熔断5s @SentinelResource：一个流量防卫防护组件注解，用于指定需要被防护的资源，对配置的资源进行流量控制、熔断降级等功能 不使用此注解，按照REST地址限流+默认限流返回 1 2 3 4 @GetMapping(\u0026#34;/rateLimit/byUrl\u0026#34;) public String byUrl() { return \u0026#34;按rest地址限流测试\u0026#34;; } 使用此注解按资源名称限流，自定义限流返回 1 2 3 4 5 6 7 8 9 10 @GetMapping(\u0026#34;/rateLimit/byResource\u0026#34;) @SentinelResource(value = \u0026#34;byResourceSentinelResource\u0026#34;, blockHandler = \u0026#34;handlerBlockHandler\u0026#34;) public String byResource() { return \u0026#34;按资源名称限流测试\u0026#34;; } public String handlerBlockHandler(BlockException blockException) { // 返回值类型要与原方法保持一致 return \u0026#34;服务不可用，触发了@SentinelResource\u0026#34;; } 使用此注解按资源名称限流，自定义限流返回，服务降级处理：blockHandler针对Sentinel配置出现违规情况；fallback针对JVM抛出的异常启动服务降级（即使有全局异常依然生效∵全局异常先捕获再抛出） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @GetMapping(\u0026#34;/rateLimit/doAction/{p1}\u0026#34;) @SentinelResource(value = \u0026#34;doActionSentinelResource\u0026#34;, blockHandler = \u0026#34;doActionBlockHandler\u0026#34;, fallback = \u0026#34;doActionFallback\u0026#34;) public String doAction(@PathVariable(\u0026#34;p1\u0026#34;) Integer p1) { if (p1 == 0) { throw new RuntimeException(\u0026#34;p1等于0直接异常\u0026#34;); } return \u0026#34;doAction\u0026#34;; } public String doActionBlockHandler(@PathVariable(\u0026#34;p1\u0026#34;) Integer p1, BlockException blockException) { // 参数要在doAction的参数基础上继续添加 log.error(\u0026#34;sentinel配置自定义限流了:{}\u0026#34;, blockException); return \u0026#34;sentinel配置自定义限流了\u0026#34;; } public String doActionFallback(@PathVariable(\u0026#34;p1\u0026#34;) Integer p1, Throwable e) { // 参数要在doAction的参数基础上继续添加 log.error(\u0026#34;程序逻辑异常了：{}\u0026#34;, e); return \u0026#34;程序逻辑异常了\u0026#34;; } 热点规则 只支持QPS模式，第“参数索引”个参数在统计窗口时长内如果访问次数超过单机阈值就限流，调用限流方法dealHandler_testHotKey 当此参数等于5时允许单机阈值达到200（热点参数必须是基本类型或者String） 授权规则 当请求中包含配置的查询参数名serverName，若其值为test/test2，限流，反之通过 1 2 3 4 5 6 7 @Component public class MyRequestOriginParser implements RequestOriginParser { @Override public String parseOrigin(HttpServletRequest request) { return request.getParameter(\u0026#34;serverName\u0026#34;); } } 规则持久化：目前8401Sentinel Service一重启，配置的规则就会丢失；将规则持久化进Nacos保存，只要Nacos里面的配置不删除，规则持续有效 pom 1 2 3 4 5 \u0026lt;!--SpringCloud ailibaba sentinel-datasource-nacos --\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.csp\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sentinel-datasource-nacos\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; Nacos新建JSON配置 1 2 3 4 5 6 7 resource：资源名称； limitApp：来源应用； grade：阈值类型，0表示线程数，1表示QPS； count：单机阈值； strategy：流控模式，0表示直接，1表示关联，2表示链路； controlBehavior：流控效果，0表示快速失败，1表示Warm Up，2表示排队等待； clusterMode：是否集群。 Sentinel整合OpenFeign：OpenFeign在Consumer调用端，Sentinel在Provider被调用端 Sentinel整合Gateway：OpenFeign在Consumer调用端，Sentinel在Provider被调用端 pom 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-cloud-starter-gateway\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.csp\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sentinel-transport-simple-http\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.8.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba.csp\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sentinel-spring-cloud-gateway-adapter\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.8.6\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.annotation\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;javax.annotation-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.3.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;compile\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; Seata：分布式事务框架，解决微服务架构下的分布式事务问题 面试 简历上写用了微服务boot/cloud做过项目，不可能只有一个数据库吧？请谈谈多个数据库之间如何处理分布式事务？ 阿里的Seata-AT模式如何做到对业务的无侵入？ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Seata提供了AT、TCC、SAGA、XA事务模式 AT 前提：基于支持本地ACID事务的关系型数据库，JAVA应用通过JDBC访问数据库 整体机制： 一阶段：业务数据和回滚日志记录再同一个本地事务中提交，释放本地锁和连接资源 二阶段：提交异步化，非常快速地完成，回滚通过一阶段的回滚日志（undo_log表）进行反向补偿 在一阶段：Seata会拦截业务SQL： （1）解析SQL语义，找到“业务SQL”要更新的业务数据，在业务数据被更新前，将其保存成before image（原快照） （2）执行“业务SQL”更新业务数据 （3）将更新之后的业务数据保存成after image，最后生成行锁 以上操作全部在一个数据库事务内完成，这样保证了一阶段操作的原子性 在二阶段： 如果是顺利提交，因为业务SQL已在一阶段提交至数据库，所以Seata只需将一阶段保存的快照数据和行锁删掉，完成数据清理即可 如果需要出现异常需要回滚，Seata就需要回滚一阶段已经执行的“业务SQL”，还原业务数据。回滚方式便是用before image还原业务数据，但在还原前要首先校验脏写，对比“数据库当前业务数据”和after image，如果两份数据完全一致说明没有脏写，可以还原业务数据，如果不一致说明出现脏写，需要人工处理 一阶段 二阶段顺利 二阶段回滚 undo_log：存储上次操作的数据，异常时根据rollback_info回滚 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.undo.BranchUndoLog\u0026#34;, \u0026#34;xid\u0026#34;: \u0026#34;10.249.94.181:8091:2072252975871426578\u0026#34;, \u0026#34;branchId\u0026#34;: 2072252975871426600, \u0026#34;sqlUndoLogs\u0026#34;: [ \u0026#34;java.util.ArrayList\u0026#34;, [ { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.undo.SQLUndoLog\u0026#34;, \u0026#34;sqlType\u0026#34;: \u0026#34;INSERT\u0026#34;, \u0026#34;tableName\u0026#34;: \u0026#34;t_order\u0026#34;, \u0026#34;beforeImage\u0026#34;: { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.sql.struct.TableRecords$EmptyTableRecords\u0026#34;, \u0026#34;tableName\u0026#34;: \u0026#34;t_order\u0026#34;, \u0026#34;rows\u0026#34;: [ \u0026#34;java.util.ArrayList\u0026#34;, [] ] }, \u0026#34;afterImage\u0026#34;: { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.sql.struct.TableRecords\u0026#34;, \u0026#34;tableName\u0026#34;: \u0026#34;t_order\u0026#34;, \u0026#34;rows\u0026#34;: [ \u0026#34;java.util.ArrayList\u0026#34;, [ { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.sql.struct.Row\u0026#34;, \u0026#34;fields\u0026#34;: [ \u0026#34;java.util.ArrayList\u0026#34;, [ { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.sql.struct.Field\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;id\u0026#34;, \u0026#34;keyType\u0026#34;: \u0026#34;PRIMARY_KEY\u0026#34;, \u0026#34;type\u0026#34;: -5, \u0026#34;value\u0026#34;: [ \u0026#34;java.lang.Long\u0026#34;, 21 ] }, { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.sql.struct.Field\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;user_id\u0026#34;, \u0026#34;keyType\u0026#34;: \u0026#34;NULL\u0026#34;, \u0026#34;type\u0026#34;: -5, \u0026#34;value\u0026#34;: [ \u0026#34;java.lang.Long\u0026#34;, 1 ] }, { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.sql.struct.Field\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;product_id\u0026#34;, \u0026#34;keyType\u0026#34;: \u0026#34;NULL\u0026#34;, \u0026#34;type\u0026#34;: -5, \u0026#34;value\u0026#34;: [ \u0026#34;java.lang.Long\u0026#34;, 1 ] }, { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.sql.struct.Field\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;count\u0026#34;, \u0026#34;keyType\u0026#34;: \u0026#34;NULL\u0026#34;, \u0026#34;type\u0026#34;: 4, \u0026#34;value\u0026#34;: 10 }, { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.sql.struct.Field\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;money\u0026#34;, \u0026#34;keyType\u0026#34;: \u0026#34;NULL\u0026#34;, \u0026#34;type\u0026#34;: 3, \u0026#34;value\u0026#34;: [ \u0026#34;java.math.BigDecimal\u0026#34;, 100 ] }, { \u0026#34;@class\u0026#34;: \u0026#34;io.seata.rm.datasource.sql.struct.Field\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;status\u0026#34;, \u0026#34;keyType\u0026#34;: \u0026#34;NULL\u0026#34;, \u0026#34;type\u0026#34;: 4, \u0026#34;value\u0026#34;: 0 } ] ] } ] ] } } ] ] } 对于分布式事务问题，你知道的解决方案有哪些？请你谈谈？ 1 2 3 4 5 6 1、2PC（两阶段提交） 2、3PC（三阶段提交） 3、TCC（Try-Confirm-Cancel）又被称为补偿事务，类似2PC的柔性分布式解决方案，2PC改良版 4、LocalMessage本地消息表 5、独立消息微服务+RabbitMQ/Kafka组件，实现可靠消息最终一致性 6、最大努力通知方案 上述面试问题都指向一个重要问题 1 一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题，但关系型数据库提供的能力是基于单机事务的，一旦遇到分布式事务场景，就需要通过更多其他技术手段来解决问题。 Seata的工作流程 XID、TC+TM+RM 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 XID：全局事务的唯一标识，可以在服务的调用链路中传递，绑定到服务的事务上下文中 TC（Transaction Coordinator）:事务协调者。维护全局和分支事务的状态，驱动全局事务提交或回滚 就是Seata本身（有且仅有一个） TM（Transaction Manager）：事务管理器。事务的发起者，负责定义全局事务的范围，并根据TC维护的全局事务和分支事务状态，做出开始全局事务、提交/回滚全局事务的决议 标注了@GlobalTransactional启动入口动作的微服务模块（比如订单模块）（有且仅有一个） RM（Resource Manager）：资源管理器。负责管理分支事务上的资源，向TC注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚 MySQL数据库本身（可以多个） 一般标注@GlobalTransactional的模块既是TM也是RM 三个组件相互协作，TC以Seata服务器形式独立部署，TM/RM则是以Seata Client的形式集成在微服务中运行 流程： （1）TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID； （2）XID 在微服务调用链路的上下文中传播； （3）RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖； （4）TM 向 TC 发起针对 XID 的全局提交或回滚决议； （5）TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。 不管是全局还是分支，只要是事务的注册就找TC cmd指令 1 2 3 4 5 6 7 运行 seata-server.bat 打开 http://localhost:7091 用户名、密码均为：seata ","date":"2025-03-19T21:36:49+08:00","permalink":"https://X-Augenstern.github.io/p/springcloud%E7%AC%94%E8%AE%B0/","title":"SpringCloud笔记"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://X-Augenstern.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://X-Augenstern.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://X-Augenstern.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://X-Augenstern.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://X-Augenstern.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://X-Augenstern.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://X-Augenstern.github.io/p/emoji-support/","title":"Emoji Support"}]